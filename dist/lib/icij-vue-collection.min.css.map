{"version":3,"sources":["webpack:///./src/styles/src/styles/functions.scss","webpack:///./src/styles/~/bootstrap-vue/dist/bootstrap-vue.css"],"names":[],"mappings":"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","file":"lib/icij-vue-collection.min.css","sourcesContent":["/*------------------------\nmixin that calculates if text needs to be light or dark\ndepending on the background color passed.\n\nFrom this W3C document: http://www.webmasterworld.com/r.cgi?f=88&d=9769&url=http://www.w3.org/TR/AERT#color-contrast\n\nColor brightness is determined by the following formula:\n((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000\n------------------------*/\n\n@function text-contrast($n) {\n  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);\n  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);\n\n  @if abs($color-brightness) < ($light-color/2){\n    @return white;\n  }\n  @else {\n    @return black;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/src/styles/functions.scss",".fade-enter-active, .fade-leave-active {\n    transition: opacity .15s linear;\n}\n.fade-enter, .fade-leave-to {\n    opacity: 0;\n}\n\n/* workaround for https://github.com/bootstrap-vue/bootstrap-vue/issues/1560 */\n/* source: _input-group.scss */\n\n.input-group > .input-group-prepend > .b-dropdown > .btn,\n.input-group > .input-group-append:not(:last-child) > .b-dropdown > .btn,\n.input-group > .input-group-append:last-child > .b-dropdown:not(:last-child):not(.dropdown-toggle) > .btn {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.input-group > .input-group-append > .b-dropdown > .btn,\n.input-group > .input-group-prepend:not(:first-child) > .b-dropdown > .btn,\n.input-group > .input-group-prepend:first-child > .b-dropdown:not(:first-child) > .btn {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n}\n\n/* Special styling for type=range and type=color input */\ninput.form-control[type=\"range\"],\ninput.form-control[type=\"color\"] {\n    height: 2.25rem;\n}\ninput.form-control.form-control-sm[type=\"range\"],\ninput.form-control.form-control-sm[type=\"color\"] {\n    height: 1.9375rem;\n}\ninput.form-control.form-control-lg[type=\"range\"],\ninput.form-control.form-control-lg[type=\"color\"] {\n    height: 3rem;\n}\n\n/* Less padding on type=color */\ninput.form-control[type=\"color\"] {\n    padding: 0.25rem 0.25rem;\n}\ninput.form-control.form-control-sm[type=\"color\"] {\n    padding: 0.125rem 0.125rem;\n}\n\n/* Add support for fixed layout table */\ntable.b-table.b-table-fixed {\n    table-layout: fixed;\n}\n\n/* Busy table styling */\ntable.b-table[aria-busy='false'] {\n    opacity: 1;\n}\ntable.b-table[aria-busy='true'] {\n    opacity: 0.6;\n}\n\n/* Sort styling */\ntable.b-table > thead > tr > th,\ntable.b-table > tfoot > tr > th {\n    position: relative;\n}\ntable.b-table > thead > tr > th.sorting,\ntable.b-table > tfoot > tr > th.sorting {\n    padding-right: 1.5em;\n    cursor: pointer;\n}\ntable.b-table > thead > tr > th.sorting::before,\ntable.b-table > thead > tr > th.sorting::after,\ntable.b-table > tfoot > tr > th.sorting::before,\ntable.b-table > tfoot > tr > th.sorting::after {\n    position: absolute;\n    bottom: 0;\n    display: block;\n    opacity: 0.4;\n    padding-bottom: inherit;\n    font-size: inherit;\n    line-height: 180%;\n}\ntable.b-table > thead > tr > th.sorting::before,\ntable.b-table > tfoot > tr > th.sorting::before {\n    right: 0.75em;\n    content: '\\2191';\n}\ntable.b-table > thead > tr > th.sorting::after,\ntable.b-table > tfoot > tr > th.sorting::after {\n    right: 0.25em;\n    content: '\\2193';\n}\ntable.b-table > thead > tr > th.sorting_asc::after,\ntable.b-table > thead > tr > th.sorting_desc::before,\ntable.b-table > tfoot > tr > th.sorting_asc::after,\ntable.b-table > tfoot > tr > th.sorting_desc::before {\n    opacity: 1;\n}\n\n/* Stacked table layout */\n/* Derived from http://blog.adrianroselli.com/2017/11/a-responsive-accessible-table.html */\n/* Always stacked */\ntable.b-table.b-table-stacked {\n    width: 100%;\n}\ntable.b-table.b-table-stacked,\ntable.b-table.b-table-stacked > tbody,\ntable.b-table.b-table-stacked > tbody > tr,\ntable.b-table.b-table-stacked > tbody > tr > td,\ntable.b-table.b-table-stacked > tbody > tr > th,\ntable.b-table.b-table-stacked > caption {\n    display: block;\n}\n\n/* Hide stuff we can't deal with, or shouldn't show */\ntable.b-table.b-table-stacked > thead,\ntable.b-table.b-table-stacked > tfoot,\ntable.b-table.b-table-stacked > tbody > tr.b-table-top-row,\ntable.b-table.b-table-stacked > tbody > tr.b-table-bottom-row {\n    display: none;\n}\n\n/* inter-row top border */\ntable.b-table.b-table-stacked > tbody > tr > :first-child {\n    border-top-width: 0.4rem;\n}\n\n/* convert TD/TH contents to \"cells\". Caveat: child elements become cells! */\ntable.b-table.b-table-stacked > tbody > tr > [data-label] {\n    display: grid;\n    grid-template-columns: 40% auto;\n    grid-gap: 0.25rem 1rem;\n}\n\n/* generate row cell \"heading\" */\ntable.b-table.b-table-stacked > tbody > tr > [data-label]::before {\n    content: attr(data-label);\n    display: inline;\n    text-align: right;\n    overflow-wrap: break-word;\n    font-weight: bold;\n    font-style: normal;\n}\n\n@media all and (max-width: 575.99px) {\n    /* Under SM */\n    table.b-table.b-table-stacked-sm {\n        width: 100%;\n    }\n    table.b-table.b-table-stacked-sm,\n    table.b-table.b-table-stacked-sm > tbody,\n    table.b-table.b-table-stacked-sm > tbody > tr,\n    table.b-table.b-table-stacked-sm > tbody > tr > td,\n    table.b-table.b-table-stacked-sm > tbody > tr > th,\n    table.b-table.b-table-stacked-sm > caption {\n        display: block;\n    }\n    /* hide stuff we can't deal with, or shouldn't show */\n    table.b-table.b-table-stacked-sm > thead,\n    table.b-table.b-table-stacked-sm > tfoot,\n    table.b-table.b-table-stacked-sm > tbody > tr.b-table-top-row,\n    table.b-table.b-table-stacked-sm > tbody > tr.b-table-bottom-row {\n        display: none;\n    }\n    /* inter-row top border */\n    table.b-table.b-table-stacked-sm > tbody > tr > :first-child {\n        border-top-width: 0.4rem;\n    }\n    /* convert TD/TH contents to \"cells\". Caveat: child elements become cells! */\n    table.b-table.b-table-stacked-sm > tbody > tr > [data-label] {\n        display: grid;\n        grid-template-columns: 40% auto;\n        grid-gap: 0.25rem 1rem;\n    }\n    /* generate row cell \"heading\" */\n    table.b-table.b-table-stacked-sm > tbody > tr > [data-label]::before {\n        content: attr(data-label);\n        display: inline;\n        text-align: right;\n        overflow-wrap: break-word;\n        font-weight: bold;\n        font-style: normal;\n    }\n}\n\n@media all and (max-width: 767.99px) {\n    /* under MD  */\n    table.b-table.b-table-stacked-md {\n        width: 100%;\n    }\n    table.b-table.b-table-stacked-md,\n    table.b-table.b-table-stacked-md > tbody,\n    table.b-table.b-table-stacked-md > tbody > tr,\n    table.b-table.b-table-stacked-md > tbody > tr > td,\n    table.b-table.b-table-stacked-md > tbody > tr > th,\n    table.b-table.b-table-stacked-md > caption {\n        display: block;\n    }\n    /* hide stuff we can't deal with, or shouldn't show */\n    table.b-table.b-table-stacked-md > thead,\n    table.b-table.b-table-stacked-md > tfoot,\n    table.b-table.b-table-stacked-md > tbody > tr.b-table-top-row,\n    table.b-table.b-table-stacked-md > tbody > tr.b-table-bottom-row {\n        display: none;\n    }\n    /* inter-row top border */\n    table.b-table.b-table-stacked-md > tbody > tr > :first-child {\n        border-top-width: 0.4rem;\n    }\n    /* convert TD/TH contents to \"cells\". Caveat: child elements become cells! */\n    table.b-table.b-table-stacked-md > tbody > tr > [data-label] {\n        display: grid;\n        grid-template-columns: 40% auto;\n        grid-gap: 0.25rem 1rem;\n    }\n    /* generate row cell \"heading\" */\n    table.b-table.b-table-stacked-md > tbody > tr > [data-label]::before {\n        content: attr(data-label);\n        display: inline;\n        text-align: right;\n        overflow-wrap: break-word;\n        font-weight: bold;\n        font-style: normal;\n    }\n}\n\n@media all and (max-width: 991.99px) {\n    /* under LG  */\n    table.b-table.b-table-stacked-lg {\n        width: 100%;\n    }\n    table.b-table.b-table-stacked-lg,\n    table.b-table.b-table-stacked-lg > tbody,\n    table.b-table.b-table-stacked-lg > tbody > tr,\n    table.b-table.b-table-stacked-lg > tbody > tr > td,\n    table.b-table.b-table-stacked-lg > tbody > tr > th,\n    table.b-table.b-table-stacked-lg > caption {\n        display: block;\n    }\n    /* hide stuff we can't deal with, or shouldn't show */\n    table.b-table.b-table-stacked-lg > thead,\n    table.b-table.b-table-stacked-lg > tfoot,\n    table.b-table.b-table-stacked-lg > tbody > tr.b-table-top-row,\n    table.b-table.b-table-stacked-lg > tbody > tr.b-table-bottom-row {\n        display: none;\n    }\n    /* inter-row top border */\n    table.b-table.b-table-stacked-lg > tbody > tr > :first-child {\n        border-top-width: 0.4rem;\n    }\n    /* convert TD/TH contents to \"cells\". Caveat: child elements become cells! */\n    table.b-table.b-table-stacked-lg > tbody > tr > [data-label] {\n        display: grid;\n        grid-template-columns: 40% auto;\n        grid-gap: 0.25rem 1rem;\n    }\n    /* generate row cell \"heading\" */\n    table.b-table.b-table-stacked-lg > tbody > tr > [data-label]::before {\n        content: attr(data-label);\n        display: inline;\n        text-align: right;\n        overflow-wrap: break-word;\n        font-weight: bold;\n        font-style: normal;\n    }\n}\n\n@media all and (max-width: 1199.99px) {\n    /* under XL  */\n    table.b-table.b-table-stacked-xl {\n        width: 100%;\n    }\n    table.b-table.b-table-stacked-xl,\n    table.b-table.b-table-stacked-xl > tbody,\n    table.b-table.b-table-stacked-xl > tbody > tr,\n    table.b-table.b-table-stacked-xl > tbody > tr > td,\n    table.b-table.b-table-stacked-xl > tbody > tr > th,\n    table.b-table.b-table-stacked-xl > caption {\n        display: block;\n    }\n    /* hide stuff we can't deal with, or shouldn't show */\n    table.b-table.b-table-stacked-xl > thead,\n    table.b-table.b-table-stacked-xl > tfoot,\n    table.b-table.b-table-stacked-xl > tbody > tr.b-table-top-row,\n    table.b-table.b-table-stacked-xl > tbody > tr.b-table-bottom-row {\n        display: none;\n    }\n    /* inter-row top border */\n    table.b-table.b-table-stacked-xl > tbody > tr > :first-child {\n        border-top-width: 0.4rem;\n    }\n    /* convert TD/TH contents to \"cells\". Caveat: child elements become cells! */\n    table.b-table.b-table-stacked-xl > tbody > tr > [data-label] {\n        display: grid;\n        grid-template-columns: 40% auto;\n        grid-gap: 0.25rem 1rem;\n    }\n    /* generate row cell \"heading\" */\n    table.b-table.b-table-stacked-xl > tbody > tr > [data-label]::before {\n        content: attr(data-label);\n        display: inline;\n        text-align: right;\n        overflow-wrap: break-word;\n        font-weight: bold;\n        font-style: normal;\n    }\n}\n\n/* Details row styling */\ntable.b-table > tbody > tr.b-table-details > td {\n    border-top: none;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/~/bootstrap-vue/dist/bootstrap-vue.css"],"sourceRoot":""}