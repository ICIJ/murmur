{"version":3,"sources":["webpack:///./docs/components/PalettePresenter.vue?8acc","webpack:///./node_modules/chroma-js/chroma.js","webpack:///./docs/components/PalettePresenter.vue?f128","webpack:///docs/components/PalettePresenter.vue","webpack:///./docs/components/PalettePresenter.vue?673f","webpack:///./docs/components/PalettePresenter.vue"],"names":["_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_PalettePresenter_vue_vue_type_style_index_0_id_0ffff514_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_PalettePresenter_vue_vue_type_style_index_0_id_0ffff514_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default","n","Color","DEG2RAD","LAB_CONSTANTS","PI","PITHIRD","RAD2DEG","TWOPI","_average_lrgb","_guess_formats","_guess_formats_sorted","_input","_interpolators","abs","atan2","bezier","blend","blend_f","brewer","burn","chroma","clip_rgb","cmyk2rgb","cos","css2rgb","darken","dodge","each","floor","hcg2rgb","hex2rgb","hsi2rgb","hsl2css","hsl2rgb","hsv2rgb","interpolate","interpolate_hsx","interpolate_lab","interpolate_lrgb","interpolate_num","interpolate_rgb","lab2lch","lab2rgb","lab_xyz","lch2lab","lch2rgb","lighten","limit","log","luminance_x","m","max","multiply","normal","num2rgb","overlay","pow","rgb2cmyk","rgb2css","rgb2hcg","rgb2hex","rgb2hsi","rgb2hsl","rgb2hsv","rgb2lab","rgb2lch","rgb2luminance","rgb2num","rgb2temperature","rgb2xyz","rgb_xyz","rnd","round","screen","sin","sqrt","temperature2rgb","type","unpack","w3cx11","xyz_lab","xyz_rgb","slice","classToType","len","name","o","ref","split","length","toLowerCase","obj","strType","Object","prototype","toString","call","x","min","args","Array","rgb","i","_clipped","_unclipped","Math","arguments","func","ctor","child","result","apply","module","exports","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","version","arg","chk","len1","me","mode","w","this","push","_rgb","sort","a","b","p","test","console","warn","hex","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","key","results","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colors","g","l","r","y","z","isNaN","Yn","Xn","Zn","t","t1","t2","t0","Kn","t3","ref1","lab","concat","I","I0","I1","c","lab0","lab1","lab2","lab3","ref2","f","scale","cubehelix","start","rotations","hue","gamma","lightness","dh","dl","fract","amp","cos_a","h","sin_a","s","random","code","digits","charAt","col1","col2","interpol","res","alpha","mix","k","v","map","rgba","lrgb","xyz0","xyz1","col","xyz","average","A","cnt","dx","dy","first","xyz2","splice","get","u","match","substr","parseInt","css","channels","hxa","str","Number","NaN","hsl","q","ref3","ref4","ref5","delta","hsv","num","_c","_g","hcg","aa","ab","join","named","L","lch","hcl","reverse","cmyk","gl","luminance","lum","cur_lum","eps","max_iter","lm","kelvin","temp","maxTemp","minTemp","temperature","K","contrast","l1","l2","distance","d","sum_sq","deltaE","C","L1","L2","a1","a2","b1","b2","c1","c2","c4","dH2","delA","delB","delC","delL","h1","sc","sh","sl","v1","v2","v3","modechan","channel","src","indexOf","set","value","clipped","amount","brighten","darker","brighter","saturate","desaturate","premultiply","bottom","top","c0","out","analyze","data","val","MAX_VALUE","sum","values","count","domain","limits","positions","_classes","_colorCache","_colors","_correctLightness","_domain","_gamma","_max","_min","_mode","_nacol","_out","_padding","_pos","_spread","_useCache","getClass","getColor","resetCache","setColors","tmap","maxc","minc","bypassMap","classes","_m","range","_o","spread","correctLightness","L0","L_actual","L_diff","L_ideal","pol","padding","numColors","dd","dm","samples","cache","nodata","scales","cool","hot","filter","add","visit","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","assignments","best","centroids","cluster","clusterSizes","dist","j","kClusters","max_log","min_log","mindist","nb_iters","newCentroids","pb","pr","ref10","ref11","ref12","ref13","ref14","ref6","ref7","ref8","ref9","repeat","tmpKMeansBreaks","LOG10E","acos","hsi","hue0","hue1","lbv","lbv0","lbv1","sat","sat0","sat1","n1","n2","render","_vm","_h","$createElement","_self","staticClass","_l","style","bgStyle","_v","_s","on","click","$event","$copyText","attrs","icon","staticRenderFns","Fa","faPaste","PalettePresentervue_type_script_lang_js_","components","props","methods","backgroundColor","color","textContrast","chroma_default","components_PalettePresentervue_type_script_lang_js_","component","componentNormalizer","options","__file","__webpack_exports__"],"mappings":"6IAAA,IAAAA,EAAAC,EAAA,QAAAC,EAAAD,EAAAE,EAAAH,GAA4iBE,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CCmC/iB,WACA,IAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GACAC,GAAA,GAAAA,MAEAL,GAAA,WAMA,IAAAM,EAAAC,EAAAC,EAAAC,EAAAC,EAGA,IAFAJ,EAAA,GACAI,EAAA,kEAAAC,MAAA,KACAF,EAAA,EAAAF,EAAAG,EAAAE,OAAiCH,EAAAF,EAASE,IAC1CD,EAAAE,EAAAD,GACAH,EAAA,WAAAE,EAAA,KAAAA,EAAAK,cAEA,gBAAAC,GACA,IAAAC,EAEA,OADAA,EAAAC,OAAAC,UAAAC,SAAAC,KAAAL,GACAR,EAAAS,IAAA,UAhBA,GAoBA7C,EAAA,SAAAkD,EAAAC,EAAA/C,GAaA,OAZA,MAAA+C,IACAA,EAAA,GAEA,MAAA/C,IACAA,EAAA,GAEA8C,EAAAC,IACAD,EAAAC,GAEAD,EAAA9C,IACA8C,EAAA9C,GAEA8C,GAGAnB,GAAA,SAAAqB,GACA,OAAAA,EAAAV,QAAA,EACAW,MAAAN,UAAAZ,MAAAc,KAAAG,GAEAA,EAAA,IAIA9E,EAAA,SAAAgF,GACA,IAAAC,EAAAhB,EAGA,IAFAe,EAAAE,UAAA,EACAF,EAAAG,WAAAH,EAAAnB,MAAA,GACAoB,EAAAhB,EAAA,EAAmBA,EAAA,EAAOgB,IAAAhB,EAC1BgB,EAAA,IACAD,EAAAC,GAAA,GAAAD,EAAAC,GAAA,OACAD,EAAAE,UAAA,GAEAF,EAAAC,GAAA,IACAD,EAAAC,GAAA,GAEAD,EAAAC,GAAA,MACAD,EAAAC,GAAA,MAEO,IAAAA,IACPD,EAAAC,GAAA,IACAD,EAAAC,GAAA,GAEAD,EAAAC,GAAA,IACAD,EAAAC,GAAA,IAOA,OAHAD,EAAAE,iBACAF,EAAAG,WAEAH,GAGAjG,EAAAqG,KAAArG,GAAAoE,GAAAiC,KAAAjC,MAAAjD,EAAAkF,KAAAlF,IAAAK,EAAA6E,KAAA7E,MAAA4B,GAAAiD,KAAAjD,IAAAR,EAAAyD,KAAAzD,IAAA0B,GAAA+B,KAAA/B,IAAAC,GAAA8B,KAAA9B,KAAA7D,EAAA2F,KAAA3F,MAAAqC,GAAAsD,KAAAtD,IAAAtC,EAAA4F,KAAA5F,IAEAN,EAAA,EAAAH,EAEAC,EAAAD,EAAA,EAEAF,EAAAE,EAAA,IAEAE,EAAA,IAAAF,EAEAgB,EAAA,WACA,OAAAsF,UAAA,aAAAzG,EACAyG,UAAA,GAEA,SAAAC,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAyG,UAAA,eAGLtF,EAAA,WAAAA,EAEAR,EAAA,GAEoC,OAAAoG,GAAA,MAAAA,EAAAC,UACpCD,EAAAC,QAAA7F,GAII8F,EAAO,GAAEC,EAAA,WACb,OAAA/F,GACK2F,MAAAE,EAAAC,QAAAE,IAAAD,IAAAH,EAAAC,QAAAE,GAML/F,EAAAiG,QAAA,QAEA1G,EAAA,GAEAF,EAAA,GAEAC,GAAA,EAEAT,EAAA,WACA,SAAAA,IACA,IAAAqH,EAAAnB,EAAAoB,EAAAnC,EAAAoC,EAAAC,EAAAC,EAAApC,EAAAqC,EAGA,IAFAF,EAAAG,KACAzB,EAAA,GACAb,EAAA,EAAAF,EAAAsB,UAAAjB,OAAyCH,EAAAF,EAASE,IAClDgC,EAAAZ,UAAApB,GACA,MAAAgC,GACAnB,EAAA0B,KAAAP,GAMA,GAHAnB,EAAAV,OAAA,IACAiC,EAAAvB,IAAAV,OAAA,IAEA,MAAA9E,EAAA+G,GACAD,EAAAK,KAAAzG,EAAAV,EAAA+G,GAAA5C,GAAAqB,EAAAjB,MAAA,aACO,CAOP,IANAxE,IACAD,IAAAsH,KAAA,SAAAC,EAAAC,GACA,OAAAA,EAAAC,EAAAF,EAAAE,IAEAxH,GAAA,GAEAiH,EAAA,EAAAH,EAAA/G,EAAAgF,OAAiDkC,EAAAH,EAAUG,IAG3D,GAFAJ,EAAA9G,EAAAkH,GACAD,EAAAH,EAAAY,KAAApB,MAAAQ,EAAApB,GACAuB,EACA,MAGAA,IACAD,EAAAK,KAAAzG,EAAAV,EAAA+G,GAAAX,MAAApG,EAAAwF,KAGA,MAAAsB,EAAAK,MACAM,QAAAC,KAAA,mBAAAlC,GAEA,MAAAsB,EAAAK,OACAL,EAAAK,KAAA,SAEA,IAAAL,EAAAK,KAAArC,QACAgC,EAAAK,KAAAD,KAAA,GAQA,OAJA5H,EAAA6F,UAAAC,SAAA,WACA,OAAA6B,KAAAU,OAGArI,EAjDA,GAqDAmB,EAAAT;;;;;;;;;;;;;;;;;;;AAsBAS,EAAAF,SAAA,CACAqH,KAAA,4FACAC,KAAA,4FACAC,KAAA,4FACAC,QAAA,4FACAC,KAAA,4FACAC,OAAA,4FACAC,KAAA,4FACAC,KAAA,4FACAC,KAAA,4FACAC,OAAA,4FACAC,OAAA,4FACAC,QAAA,4FACAC,KAAA,4FACAC,MAAA,4FACAC,OAAA,4FACAC,KAAA,4FACAC,MAAA,4FACAC,OAAA,4FACAC,QAAA,4FACAC,SAAA,gHACAC,OAAA,gHACAC,KAAA,gHACAC,KAAA,gHACAC,KAAA,gHACAC,OAAA,gHACAC,KAAA,gHACAC,KAAA,gHACAC,KAAA,gHACAC,KAAA,kFACAC,OAAA,kFACAC,KAAA,4FACAC,KAAA,0HACAC,MAAA,kFACAC,OAAA,0HACAC,QAAA,kFACAC,QAAA,6FAGA,WACA,IAAAC,EAAAC,EAEA,IAAAD,KADAC,EAAA,GACA1J,EACA0J,EAAA/C,KAAA3G,EAAAyJ,EAAAjF,eAAAxE,EAAAyJ,IAJA,GAgBA5F,GAAA,CACA8F,UAAA,UACAC,aAAA,UACAC,KAAA,UACAC,WAAA,UACAC,MAAA,UACAC,MAAA,UACAC,OAAA,UACAC,MAAA,UACAC,eAAA,UACAC,KAAA,UACAC,WAAA,UACAC,MAAA,UACAC,UAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,MAAA,UACAC,WAAA,UACAC,eAAA,UACAC,SAAA,UACAC,QAAA,UACAC,KAAA,UACAC,SAAA,UACAC,SAAA,UACAC,cAAA,UACAC,SAAA,UACAC,UAAA,UACAC,SAAA,UACAC,UAAA,UACAC,YAAA,UACAC,eAAA,UACAC,WAAA,UACAC,WAAA,UACAC,QAAA,UACAC,WAAA,UACAC,aAAA,UACAC,cAAA,UACAC,cAAA,UACAC,cAAA,UACAC,cAAA,UACAC,WAAA,UACAC,SAAA,UACAC,YAAA,UACAC,QAAA,UACAC,QAAA,UACAC,WAAA,UACAC,UAAA,UACAC,YAAA,UACAC,YAAA,UACAC,QAAA,UACAC,UAAA,UACAC,WAAA,UACAC,KAAA,UACAC,UAAA,UACAC,KAAA,UACAC,MAAA,UACAC,YAAA,UACAC,KAAA,UACAC,SAAA,UACAC,QAAA,UACAC,UAAA,UACAC,OAAA,UACAC,MAAA,UACAC,MAAA,UACAC,WAAA,UACAC,SAAA,UACAC,cAAA,UACAC,UAAA,UACAC,aAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,eAAA,UACAC,qBAAA,UACAC,UAAA,UACAC,WAAA,UACAC,UAAA,UACAC,UAAA,UACAC,YAAA,UACAC,cAAA,UACAC,aAAA,UACAC,eAAA,UACAC,eAAA,UACAC,eAAA,UACAC,YAAA,UACAC,KAAA,UACAC,UAAA,UACAC,MAAA,UACAC,QAAA,UACAC,OAAA,UACAC,QAAA,UACAC,QAAA,UACAC,iBAAA,UACAC,WAAA,UACAC,aAAA,UACAC,aAAA,UACAC,eAAA,UACAC,gBAAA,UACAC,kBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,aAAA,UACAC,UAAA,UACAC,UAAA,UACAC,SAAA,UACAC,YAAA,UACAC,KAAA,UACAC,QAAA,UACAC,MAAA,UACAC,UAAA,UACAC,OAAA,UACAC,UAAA,UACAC,OAAA,UACAC,cAAA,UACAC,UAAA,UACAC,cAAA,UACAC,cAAA,UACAC,WAAA,UACAC,UAAA,UACAC,KAAA,UACAC,KAAA,UACAC,KAAA,UACAC,WAAA,UACAC,OAAA,UACAC,QAAA,UACAC,QAAA,UACAC,cAAA,UACAC,IAAA,UACAC,UAAA,UACAC,UAAA,UACAC,YAAA,UACAC,OAAA,UACAC,WAAA,UACAC,SAAA,UACAC,SAAA,UACAC,OAAA,UACAC,OAAA,UACAC,QAAA,UACAC,UAAA,UACAC,UAAA,UACAC,UAAA,UACAC,KAAA,UACAC,YAAA,UACAC,UAAA,UACAC,IAAA,UACAC,KAAA,UACAC,QAAA,UACAC,OAAA,UACAC,UAAA,UACAC,OAAA,UACAC,MAAA,UACAC,MAAA,UACAC,WAAA,UACAC,OAAA,UACAC,YAAA,WAGAnT,EAAAoT,OAAAzP,GAEArC,EAAA,WACA,IAAAsF,EAAA7B,EAAA8B,EAAAwM,EAAAC,EAAAC,EAAA1O,EAAA2O,EAAAC,EAYA,OAXA1O,EAAArB,GAAA4B,WACAgO,EAAAvO,EAAA,GAAA6B,EAAA7B,EAAA,GAAA8B,EAAA9B,EAAA,GACAyO,GAAAF,EAAA,QACAzO,EAAA6O,MAAA9M,GAAA4M,IAAA5M,EAAA,IACA6M,EAAAC,MAAA7M,GAAA2M,IAAA3M,EAAA,IACA2M,EAAAzU,EAAA4U,GAAApS,EAAAiS,GACA3O,EAAA9F,EAAA6U,GAAArS,EAAAsD,GACA4O,EAAA1U,EAAA8U,GAAAtS,EAAAkS,GACAF,EAAA1P,GAAA,UAAAgB,EAAA,UAAA2O,EAAA,SAAAC,GACAJ,EAAAxP,IAAA,QAAAgB,EAAA,UAAA2O,EAAA,QAAAC,GACA5M,EAAAhD,GAAA,SAAAgB,EAAA,SAAA2O,EAAA,UAAAC,GACA,CAAAF,EAAAF,EAAAxM,EAAA9B,EAAAV,OAAA,EAAAU,EAAA,OAGAlB,GAAA,SAAA0P,GACA,YAAAA,GAAA,aAAAA,EAAA,MAAAnR,GAAAmR,EAAA,cAGAhS,EAAA,SAAAuS,GACA,OAAAA,EAAA/U,EAAAgV,GACAD,MAEA/U,EAAAiV,IAAAF,EAAA/U,EAAAkV,KAIAlV,EAAA,CACAmV,GAAA,GACAN,GAAA,OACAD,GAAA,EACAE,GAAA,QACAI,GAAA,WACAF,GAAA,WACAC,GAAA,UACAG,GAAA,YAGAvR,GAAA,WACA,IAAAiE,EAAAwM,EAAAE,EAAApP,EAAAiQ,EAAAvP,EAAA2O,EAAAC,EAGA,OAFAtP,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAiQ,EAAAnR,GAAAsQ,EAAAF,EAAAxM,GAAAhC,EAAAuP,EAAA,GAAAZ,EAAAY,EAAA,GAAAX,EAAAW,EAAA,GACA,KAAAZ,EAAA,QAAA3O,EAAA2O,GAAA,KAAAA,EAAAC,KAGAvQ,GAAA,SAAAqQ,GACA,OAAAA,GAAA,aACAA,EAAA,MAEAnR,IAAAmR,EAAA,kBAIA3P,GAAA,SAAAkQ,GACA,OAAAA,EAAA/U,EAAAoV,GACA/R,GAAA0R,EAAA,KAEAA,EAAA/U,EAAAiV,GAAAjV,EAAAkV,IAIAhR,GAAA,WACA,IAAA4D,EAAAwM,EAAAE,EAAApP,EAAAU,EAAA2O,EAAAC,EAQA,OAPAtP,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAoP,EAAArQ,GAAAqQ,GACAF,EAAAnQ,GAAAmQ,GACAxM,EAAA3D,GAAA2D,GACAhC,EAAAjB,IAAA,SAAA2P,EAAA,SAAAF,EAAA,SAAAxM,GAAA9H,EAAA6U,IACAJ,EAAA5P,IAAA,SAAA2P,EAAA,SAAAF,EAAA,QAAAxM,GAAA9H,EAAA4U,IACAF,EAAA7P,IAAA,SAAA2P,EAAA,QAAAF,EAAA,SAAAxM,GAAA9H,EAAA8U,IACA,CAAAhP,EAAA2O,EAAAC,IAGAzT,EAAAqU,IAAA,WACA,gBAAA9O,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGL/U,EAAA8U,IAAA/S,EAEAzC,EAAA6F,UAAA2P,IAAA,WACA,OAAAzR,GAAA4D,KAAAE,OAGA/G,EAAA,SAAAyT,GACA,IAAAmB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3Q,EAAAiQ,EAAAW,EAuFA,OAtFA3B,EAAA,WACA,IAAApP,EAAAE,EAAAsF,EAEA,IADAA,EAAA,GACAtF,EAAA,EAAAF,EAAAoP,EAAA/O,OAAsCH,EAAAF,EAASE,IAC/CwQ,EAAAtB,EAAAlP,GACAsF,EAAA/C,KAAAzG,EAAA0U,IAEA,OAAAlL,EAPA,GASA,IAAA4J,EAAA/O,QACAF,EAAA,WACA,IAAAH,EAAAE,EAAAsF,EAEA,IADAA,EAAA,GACAtF,EAAA,EAAAF,EAAAoP,EAAA/O,OAAwCH,EAAAF,EAASE,IACjDwQ,EAAAtB,EAAAlP,GACAsF,EAAA/C,KAAAiO,EAAAL,OAEA,OAAA7K,EAPA,GAQOmL,EAAAxQ,EAAA,GAAAyQ,EAAAzQ,EAAA,GACPoQ,EAAA,SAAAT,GACA,IAAA5O,EAAAmP,EASA,OARAA,EAAA,WACA,IAAAnQ,EAAAsF,EAEA,IADAA,EAAA,GACAtE,EAAAhB,EAAA,EAAyBA,GAAA,EAAQgB,IAAAhB,EACjCsF,EAAA/C,KAAAkO,EAAAzP,GAAA4O,GAAAc,EAAA1P,GAAAyP,EAAAzP,KAEA,OAAAsE,EANA,GAQAxJ,EAAAqU,IAAA1O,MAAA3F,EAAAqU,KAEK,IAAAjB,EAAA/O,QACL+P,EAAA,WACA,IAAApQ,EAAAE,EAAAsF,EAEA,IADAA,EAAA,GACAtF,EAAA,EAAAF,EAAAoP,EAAA/O,OAAwCH,EAAAF,EAASE,IACjDwQ,EAAAtB,EAAAlP,GACAsF,EAAA/C,KAAAiO,EAAAL,OAEA,OAAA7K,EAPA,GAQOmL,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GACPG,EAAA,SAAAT,GACA,IAAA5O,EAAAmP,EASA,OARAA,EAAA,WACA,IAAAnQ,EAAAsF,EAEA,IADAA,EAAA,GACAtE,EAAAhB,EAAA,EAAyBA,GAAA,EAAQgB,IAAAhB,EACjCsF,EAAA/C,MAAA,EAAAqN,IAAA,EAAAA,GAAAa,EAAAzP,GAAA,KAAA4O,KAAAc,EAAA1P,GAAA4O,IAAAe,EAAA3P,IAEA,OAAAsE,EANA,GAQAxJ,EAAAqU,IAAA1O,MAAA3F,EAAAqU,KAEK,IAAAjB,EAAA/O,QACL0Q,EAAA,WACA,IAAA/Q,EAAAE,EAAAsF,EAEA,IADAA,EAAA,GACAtF,EAAA,EAAAF,EAAAoP,EAAA/O,OAAwCH,EAAAF,EAASE,IACjDwQ,EAAAtB,EAAAlP,GACAsF,EAAA/C,KAAAiO,EAAAL,OAEA,OAAA7K,EAPA,GAQOmL,EAAAI,EAAA,GAAAH,EAAAG,EAAA,GAAAF,EAAAE,EAAA,GAAAD,EAAAC,EAAA,GACPR,EAAA,SAAAT,GACA,IAAA5O,EAAAmP,EASA,OARAA,EAAA,WACA,IAAAnQ,EAAAsF,EAEA,IADAA,EAAA,GACAtE,EAAAhB,EAAA,EAAyBA,GAAA,EAAQgB,IAAAhB,EACjCsF,EAAA/C,MAAA,EAAAqN,IAAA,EAAAA,IAAA,EAAAA,GAAAa,EAAAzP,GAAA,KAAA4O,IAAA,EAAAA,KAAAc,EAAA1P,GAAA,KAAA4O,OAAAe,EAAA3P,GAAA4O,MAAAgB,EAAA5P,IAEA,OAAAsE,EANA,GAQAxJ,EAAAqU,IAAA1O,MAAA3F,EAAAqU,KAEK,IAAAjB,EAAA/O,SACLmQ,EAAA7U,EAAAyT,EAAAtP,MAAA,MACA2Q,EAAA9U,EAAAyT,EAAAtP,MAAA,MACAyQ,EAAA,SAAAT,GACA,OAAAA,EAAA,GACAU,EAAA,EAAAV,GAEAW,EAAA,GAAAX,EAAA,OAIAS,GAGAvU,EAAAL,OAAA,SAAAyT,GACA,IAAA4B,EAKA,OAJAA,EAAArV,EAAAyT,GACA4B,EAAAC,MAAA,WACA,OAAAjV,EAAAiV,MAAAD,IAEAA,GAGAhV,EAAAkV,UAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAT,EAyFA,OAxFA,MAAAG,IACAA,EAAA,KAEA,MAAAC,IACAA,GAAA,KAEA,MAAAC,IACAA,EAAA,GAEA,MAAAC,IACAA,EAAA,GAEA,MAAAC,IACAA,EAAA,OAEAC,EAAA,EACA,UAAA/R,GAAA8R,GACAE,EAAAF,EAAA,GAAAA,EAAA,IAEAE,EAAA,EACAF,EAAA,CAAAA,MAEAP,EAAA,SAAAU,GACA,IAAA9O,EAAA+O,EAAA9O,EAAA+O,EAAAvC,EAAAwC,EAAAvC,EAAAC,EAAAuC,EAUA,OATAlP,EAAAzH,IAAAgW,EAAA,SAAAC,EAAAM,GACApC,EAAAlR,GAAAmT,EAAA,GAAAE,EAAAC,EAAAJ,GACAO,EAAA,IAAAL,EAAAH,EAAA,GAAAK,EAAAF,EAAAH,EACAM,EAAAE,EAAAvC,GAAA,EAAAA,GAAA,EACAsC,EAAAzV,EAAAyG,GACAkP,EAAAxS,GAAAsD,GACA2M,EAAAD,EAAAqC,IAAA,OAAAC,EAAA,QAAAE,GACAzC,EAAAC,EAAAqC,IAAA,OAAAC,EAAA,OAAAE,GACAjP,EAAAyM,EAAAqC,GAAA,QAAAC,GACA5V,EAAAC,EAAA,KAAAsT,EAAA,IAAAF,EAAA,IAAAxM,EAAA,MAEAmO,EAAAG,MAAA,SAAAY,GACA,aAAAA,EACAZ,GAEAA,EAAAY,EACAf,IAEAA,EAAAI,UAAA,SAAA7B,GACA,aAAAA,EACA6B,GAEAA,EAAA7B,EACAyB,IAEAA,EAAAM,MAAA,SAAAjC,GACA,aAAAA,EACAiC,GAEAA,EAAAjC,EACA2B,IAEAA,EAAAK,IAAA,SAAAQ,GACA,aAAAA,EACAR,GAEAA,EAAAQ,EACA,UAAApS,GAAA4R,IACAG,EAAAH,EAAA,GAAAA,EAAA,GACA,IAAAG,IACAH,IAAA,KAGAG,EAAA,EAEAR,IAEAA,EAAAO,UAAA,SAAAM,GACA,aAAAA,EACAN,GAEA,UAAA9R,GAAAoS,IACAN,EAAAM,EACAJ,EAAAI,EAAA,GAAAA,EAAA,KAEAN,EAAA,CAAAM,KACAJ,EAAA,GAEAT,IAEAA,EAAAC,MAAA,WACA,OAAAjV,EAAAiV,MAAAD,IAEAA,EAAAK,OACAL,GAGAhV,EAAAgW,OAAA,WACA,IAAAC,EAAAC,EAAAhS,EAGA,IAFAgS,EAAA,mBACAD,EAAA,IACA/R,EAAA,EAAmBA,EAAA,IAAOA,EAC1B+R,GAAAC,EAAAC,OAAA3V,EAAA,GAAA6E,KAAA2Q,WAEA,WAAAnX,EAAAoX,IAGAzW,EAAA,GAEAuB,EAAA,SAAAqV,EAAAC,EAAArB,EAAAlT,GACA,IAAAwU,EAAAtS,EAAAE,EAAAqS,EAmBA,IAlBA,MAAAvB,IACAA,EAAA,IAEA,MAAAlT,IACAA,EAAA,OAQA,WAAA2B,GAAA2S,KACAA,EAAApW,EAAAoW,IAEA,WAAA3S,GAAA4S,KACAA,EAAArW,EAAAqW,IAEAnS,EAAA,EAAAF,EAAAxE,EAAA6E,OAA4CH,EAAAF,EAASE,IAErD,GADAoS,EAAA9W,EAAA0E,GACApC,IAAAwU,EAAA,IACAC,EAAAD,EAAA,GAAAF,EAAAC,EAAArB,EAAAlT,GACA,MAGA,SAAAyU,EACA,mBAAAzU,EAAA,oBAEA,OAAAyU,EAAAC,MAAAJ,EAAAI,QAAAxB,GAAAqB,EAAAG,QAAAJ,EAAAI,WAGAxW,EAAAe,cAEAlC,EAAA6F,UAAA3D,YAAA,SAAAsV,EAAArB,EAAAlT,GACA,OAAAf,EAAAyF,KAAA6P,EAAArB,EAAAlT,IAGA9B,EAAAyW,IAAA1V,EAEAlC,EAAA6F,UAAA+R,IAAA5X,EAAA6F,UAAA3D,YAEAxB,EAAA0F,IAAA,WACA,IAAAyR,EAAAvS,EAAAqF,EAAAmN,EAGA,IAAAD,KAFAvS,EAAAT,GAAA4B,WACAkE,EAAA,GACArF,EACAwS,EAAAxS,EAAAuS,GACAlN,EAAA/C,KAAAkQ,GAEA,OAAAnN,GAGAxJ,EAAAiF,IAAA,WACA,gBAAAM,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGLzV,EAAA6F,UAAAO,IAAA,SAAA7B,GAIA,OAHA,MAAAA,IACAA,GAAA,GAEAA,EACAoD,KAAAE,KAAAkQ,IAAAvR,KAAAjC,OAAAU,MAAA,KAEA0C,KAAAE,KAAA5C,MAAA,MAIAjF,EAAA6F,UAAAmS,KAAA,SAAAzT,GAIA,OAHA,MAAAA,IACAA,GAAA,GAEAA,EAGA,CAAAiC,KAAAjC,MAAAoD,KAAAE,KAAA,IAAArB,KAAAjC,MAAAoD,KAAAE,KAAA,IAAArB,KAAAjC,MAAAoD,KAAAE,KAAA,IAAAF,KAAAE,KAAA,IAFAF,KAAAE,KAAA5C,MAAA,IAKAzE,EAAAoH,KAAA,CACAK,EAAA,EACAC,KAAA,SAAAnI,GACA,IAAAgI,EAEA,OADAA,EAAAlD,GAAA4B,WACA,UAAA7B,GAAAmD,IAAA,IAAAA,EAAAvC,OACA,MAEA,IAAAuC,EAAAvC,QAAA,WAAAZ,GAAAmD,EAAA,KAAAA,EAAA,OAAAA,EAAA,MACA,WADA,KAMArH,EAAAuX,KAAAvX,EAAA0F,IAEA/D,EAAA,SAAAkV,EAAAC,EAAArB,EAAAlT,GACA,IAAAiV,EAAAC,EAGA,OAFAD,EAAAX,EAAA1P,KACAsQ,EAAAX,EAAA3P,KACA,IAAA7H,EAAA0E,GAAAnB,GAAA2U,EAAA,SAAA/B,GAAA5S,GAAA4U,EAAA,MAAAhC,GAAAzR,GAAAnB,GAAA2U,EAAA,SAAA/B,GAAA5S,GAAA4U,EAAA,MAAAhC,GAAAzR,GAAAnB,GAAA2U,EAAA,SAAA/B,GAAA5S,GAAA4U,EAAA,MAAAhC,GAAAlT,IAGA1C,EAAA,SAAAgU,GACA,IAAA6D,EAAAjC,EAAAhR,EAAAE,EAAAe,EAAAiS,EAGA,IAFAlC,EAAA,EAAA5B,EAAA/O,OACA6S,EAAA,UACAhT,EAAA,EAAAF,EAAAoP,EAAA/O,OAAoCH,EAAAF,EAASE,IAC7C+S,EAAA7D,EAAAlP,GACAe,EAAAgS,EAAAvQ,KACAwQ,EAAA,IAAA9U,GAAA6C,EAAA,MAAA+P,EACAkC,EAAA,IAAA9U,GAAA6C,EAAA,MAAA+P,EACAkC,EAAA,IAAA9U,GAAA6C,EAAA,MAAA+P,EACAkC,EAAA,IAAAjS,EAAA,GAAA+P,EAQA,OANAkC,EAAA,GAAA3T,GAAA2T,EAAA,IACAA,EAAA,GAAA3T,GAAA2T,EAAA,IACAA,EAAA,GAAA3T,GAAA2T,EAAA,IACAA,EAAA,OACAA,EAAA,MAEA,IAAArY,EAAAoB,EAAAiX,KAGA1X,EAAAiH,KAAA,QAAAvF,IAEAlB,EAAAmX,QAAA,SAAA/D,EAAA9M,GACA,IAAA8Q,EAAAZ,EAAA9B,EAAA2C,EAAAC,EAAAC,EAAAC,EAAAtS,EAAAoO,EAAAtP,EAAAE,EAAAgT,EAAAO,EASA,GARA,MAAAnR,IACAA,EAAA,OAEAgN,EAAAF,EAAA/O,OACA+O,IAAAwD,IAAA,SAAAlC,GACA,OAAA1U,EAAA0U,KAEA8C,EAAApE,EAAAsE,OAAA,QACA,SAAApR,EACA,OAAAlH,EAAAgU,GAMA,IAAAlO,KAJAgS,EAAAM,EAAAG,IAAArR,GACA+Q,EAAA,GACAC,EAAA,EACAC,EAAA,EACAL,EACAA,EAAAhS,GAAAgS,EAAAhS,IAAA,EACAmS,EAAA5Q,KAAAiN,MAAAwD,EAAAhS,IAAA,KACA,MAAAoB,EAAA6P,OAAAjR,IAAAwO,MAAAwD,EAAAhS,MACAkS,EAAAF,EAAAhS,GAAA,IAAAlG,EACAsY,GAAAnX,EAAAiX,GACAG,GAAAjU,GAAA8T,IAIA,IADAZ,EAAAgB,EAAAhB,QACAtS,EAAA,EAAAF,EAAAoP,EAAA/O,OAAoCH,EAAAF,EAASE,IAI7C,IAAAgB,KAHAwP,EAAAtB,EAAAlP,GACAuT,EAAA/C,EAAAiD,IAAArR,GACAkQ,GAAA9B,EAAA8B,QACAU,EACAxD,MAAA+D,EAAAvS,MACAmS,EAAAnS,IAAA,EACA,MAAAoB,EAAA6P,OAAAjR,IACAkS,EAAAK,EAAAvS,GAAA,IAAAlG,EACAsY,GAAAnX,EAAAiX,GACAG,GAAAjU,GAAA8T,IAEAF,EAAAhS,IAAAuS,EAAAvS,IAKA,IAAAA,KAAAgS,EACA,SAAA5Q,EAAA6P,OAAAjR,GAAA,CACAkS,EAAA1X,EAAA6X,EAAAF,EAAAnS,GAAAoS,EAAAD,EAAAnS,IAAAlG,EAAA,IACA,MAAAoY,EAAA,EACAA,GAAA,IAEA,MAAAA,GAAA,IACAA,GAAA,IAEAF,EAAAhS,GAAAkS,OAEAF,EAAAhS,GAAAgS,EAAAhS,GAAAmS,EAAAnS,GAGA,OAAAlF,EAAAkX,EAAA5Q,GAAAkQ,QAAAlD,IAGA5S,EAAA,SAAAwG,GACA,IAAAN,EAAAC,EAAAwM,EAAAE,EAAAtO,EAAA2S,EACA,GAAA1Q,EAAA2Q,MAAA,uCAYA,OAXA,IAAA3Q,EAAA7C,QAAA,IAAA6C,EAAA7C,SACA6C,IAAA4Q,OAAA,IAEA,IAAA5Q,EAAA7C,SACA6C,IAAA9C,MAAA,IACA8C,IAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA0Q,EAAAG,SAAA7Q,EAAA,IACAqM,EAAAqE,GAAA,GACAvE,EAAAuE,GAAA,MACA/Q,EAAA,IAAA+Q,EACA,CAAArE,EAAAF,EAAAxM,EAAA,GAEA,GAAAK,EAAA2Q,MAAA,wBASA,OARA,IAAA3Q,EAAA7C,SACA6C,IAAA4Q,OAAA,IAEAF,EAAAG,SAAA7Q,EAAA,IACAqM,EAAAqE,GAAA,OACAvE,EAAAuE,GAAA,OACA/Q,EAAA+Q,GAAA,MACAhR,EAAAxD,IAAA,IAAAwU,GAAA,aACA,CAAArE,EAAAF,EAAAxM,EAAAD,GAEA,SAAArH,EAAAyY,MAAA/S,EAAA1F,EAAAyY,IAAA9Q,IACA,OAAAjC,EAEA,uBAAAiC,GAGA1E,GAAA,SAAAyV,EAAA3R,GACA,IAAAM,EAAAC,EAAAwM,EAAA6E,EAAA3E,EAAA4E,EAAAP,EAgBA,OAfA,MAAAtR,IACAA,EAAA,QAEAiN,EAAA0E,EAAA,GAAA5E,EAAA4E,EAAA,GAAApR,EAAAoR,EAAA,GAAArR,EAAAqR,EAAA,GACA,SAAA3R,IACAA,EAAAM,EAAA,gBAEA2M,EAAAlO,KAAAjC,MAAAmQ,GACAF,EAAAhO,KAAAjC,MAAAiQ,GACAxM,EAAAxB,KAAAjC,MAAAyD,GACA+Q,EAAArE,GAAA,GAAAF,GAAA,EAAAxM,EACAsR,EAAA,SAAAP,EAAAjT,SAAA,IACAwT,IAAAL,OAAAK,EAAA9T,OAAA,GACA6T,EAAA,IAAA9U,GAAA,IAAAwD,GAAAjC,SAAA,IACAuT,IAAAJ,OAAAI,EAAA7T,OAAA,GACA,eACA,OAAAiC,EAAAhC,eACA,WACA,OAAA6T,EAAAD,EACA,WACA,OAAAA,EAAAC,EACA,QACA,OAAAA,GAPA,IAYA5Y,EAAA2H,IAAA,SAAA2O,GACA,OAAAnV,EAAAmV,IAGA7V,EAAAkH,IAAA,WACA,gBAAA3B,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGLzV,EAAA6F,UAAAwC,IAAA,SAAAZ,GAIA,OAHA,MAAAA,IACAA,EAAA,QAEA9D,GAAAgE,KAAAE,KAAAJ,IAGAjH,EAAAoH,KAAA,CACAK,EAAA,EACAC,KAAA,SAAAnI,GACA,OAAA0G,UAAAjB,QAAA,WAAAZ,GAAA7E,GACA,eAKAiC,EAAA,WACA,IAAAkE,EAAA8B,EAAA6N,EAAArB,EAAAwC,EAAA3Q,EAAAoO,EAAApP,EAAAqP,EAAApP,EAAA4R,EAAAhC,EAAAC,EAAAG,EAGA,GAFApP,EAAArB,GAAA4B,WACAuQ,EAAA9Q,EAAA,GAAAgR,EAAAhR,EAAA,GAAAuO,EAAAvO,EAAA,GACA,IAAAgR,EACAxC,EAAAF,EAAAxM,EAAA,IAAAyM,MACK,CASL,IARAa,EAAA,QACAO,EAAA,QACAV,EAAAV,EAAA,GAAAA,GAAA,EAAAyC,GAAAzC,EAAAyC,EAAAzC,EAAAyC,EACAhC,EAAA,EAAAT,EAAAU,EACA6B,GAAA,IACA1B,EAAA,GAAA0B,EAAA,IACA1B,EAAA,GAAA0B,EACA1B,EAAA,GAAA0B,EAAA,IACA3Q,EAAAhB,EAAA,EAAqBA,GAAA,EAAQgB,IAAAhB,EAC7BiQ,EAAAjP,GAAA,IACAiP,EAAAjP,IAAA,GAEAiP,EAAAjP,GAAA,IACAiP,EAAAjP,IAAA,GAEA,EAAAiP,EAAAjP,GAAA,EACAwP,EAAAxP,GAAA6O,EAAA,GAAAC,EAAAD,GAAAI,EAAAjP,GACS,EAAAiP,EAAAjP,GAAA,EACTwP,EAAAxP,GAAA8O,EACS,EAAAG,EAAAjP,GAAA,EACTwP,EAAAxP,GAAA6O,GAAAC,EAAAD,IAAA,IAAAI,EAAAjP,IAAA,EAEAwP,EAAAxP,GAAA6O,EAGA5P,EAAA,CAAAf,GAAA,IAAAsR,EAAA,IAAAtR,GAAA,IAAAsR,EAAA,IAAAtR,GAAA,IAAAsR,EAAA,KAAAnB,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GAEA,OAAAY,EAAAV,OAAA,EACA,CAAAkP,EAAAF,EAAAxM,EAAA9B,EAAA,IAEA,CAAAwO,EAAAF,EAAAxM,IAIAnE,GAAA,SAAA6Q,EAAAF,EAAAxM,GACA,IAAAgP,EAAAvC,EAAAxO,EAAAX,EAAA4R,EA2BA,YA1BA,IAAAxC,KAAAlP,QAAA,IACAF,EAAAoP,IAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,IAEAoP,GAAA,IACAF,GAAA,IACAxM,GAAA,IACA/B,EAAAO,KAAAP,IAAAyO,EAAAF,EAAAxM,GACA9E,GAAAsD,KAAAtD,IAAAwR,EAAAF,EAAAxM,GACAyM,GAAAvR,GAAA+C,GAAA,EACA/C,KAAA+C,GACAiR,EAAA,EACAF,EAAAuC,OAAAC,KAEAtC,EAAAzC,EAAA,IAAAvR,GAAA+C,IAAA/C,GAAA+C,IAAA/C,GAAA+C,IAAA,EAAA/C,GAAA+C,GAEAyO,IAAAxR,GACA8T,GAAAxC,EAAAxM,IAAA9E,GAAA+C,GACKuO,IAAAtR,GACL8T,EAAA,GAAAhP,EAAA0M,IAAAxR,GAAA+C,GACK+B,IAAA9E,KACL8T,EAAA,GAAAtC,EAAAF,IAAAtR,GAAA+C,IAEA+Q,GAAA,GACAA,EAAA,IACAA,GAAA,KAEA,CAAAA,EAAAE,EAAAzC,IAGAtT,EAAAsY,IAAA,WACA,gBAAA/S,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGL/U,EAAA+Y,IAAAzX,EAEAhC,EAAA6F,UAAA4T,IAAA,WACA,OAAA5V,GAAA8D,KAAAE,OAGA5F,EAAA,WACA,IAAAiE,EAAA8B,EAAAmO,EAAA3B,EAAAwC,EAAA3Q,EAAA4B,EAAAyR,EAAAhF,EAAApP,EAAAiQ,EAAAW,EAAAyD,EAAAC,EAAAC,EAAA3C,EAAAjC,EAAA6C,EAIA,GAHA5R,EAAArB,GAAA4B,WACAuQ,EAAA9Q,EAAA,GAAAgR,EAAAhR,EAAA,GAAA4R,EAAA5R,EAAA,GACA4R,GAAA,IACA,IAAAZ,EACAxC,EAAAF,EAAAxM,EAAA8P,OAiBA,OAfA,MAAAd,IACAA,EAAA,GAEAA,EAAA,MACAA,GAAA,KAEAA,EAAA,IACAA,GAAA,KAEAA,GAAA,GACA3Q,EAAA1E,EAAAqV,GACAb,EAAAa,EAAA3Q,EACA4B,EAAA6P,GAAA,EAAAZ,GACAwC,EAAA5B,GAAA,EAAAZ,EAAAf,GACAlB,EAAA6C,GAAA,EAAAZ,GAAA,EAAAf,IACA9P,GACA,OACAf,EAAA,CAAAwS,EAAA7C,EAAAhN,GAAAyM,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACA,MACA,OACAiQ,EAAA,CAAAmE,EAAA5B,EAAA7P,GAAAyM,EAAAa,EAAA,GAAAf,EAAAe,EAAA,GAAAvN,EAAAuN,EAAA,GACA,MACA,OACAW,EAAA,CAAAjO,EAAA6P,EAAA7C,GAAAP,EAAAwB,EAAA,GAAA1B,EAAA0B,EAAA,GAAAlO,EAAAkO,EAAA,GACA,MACA,OACAyD,EAAA,CAAA1R,EAAAyR,EAAA5B,GAAApD,EAAAiF,EAAA,GAAAnF,EAAAmF,EAAA,GAAA3R,EAAA2R,EAAA,GACA,MACA,OACAC,EAAA,CAAA3E,EAAAhN,EAAA6P,GAAApD,EAAAkF,EAAA,GAAApF,EAAAoF,EAAA,GAAA5R,EAAA4R,EAAA,GACA,MACA,OACAC,EAAA,CAAA/B,EAAA7P,EAAAyR,GAAAhF,EAAAmF,EAAA,GAAArF,EAAAqF,EAAA,GAAA7R,EAAA6R,EAAA,GAGA,OAAAnF,EAAAF,EAAAxM,EAAA9B,EAAAV,OAAA,EAAAU,EAAA,OAGApC,GAAA,WACA,IAAAkE,EAAA8R,EAAAtF,EAAAwC,EAAA/Q,EAAAyO,EAAApP,EAAA4R,EAAAY,EAyBA,OAxBAxS,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAW,EAAAO,KAAAP,IAAAyO,EAAAF,EAAAxM,GACA9E,GAAAsD,KAAAtD,IAAAwR,EAAAF,EAAAxM,GACA8R,EAAA5W,GAAA+C,EACA6R,EAAA5U,GAAA,IACA,IAAAA,IACA8T,EAAAuC,OAAAC,IACAtC,EAAA,IAEAA,EAAA4C,EAAA5W,GACAwR,IAAAxR,KACA8T,GAAAxC,EAAAxM,GAAA8R,GAEAtF,IAAAtR,KACA8T,EAAA,GAAAhP,EAAA0M,GAAAoF,GAEA9R,IAAA9E,KACA8T,EAAA,GAAAtC,EAAAF,GAAAsF,GAEA9C,GAAA,GACAA,EAAA,IACAA,GAAA,MAGA,CAAAA,EAAAE,EAAAY,IAGA3W,EAAA4Y,IAAA,WACA,gBAAArT,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGL/U,EAAAqZ,IAAA9X,EAEAjC,EAAA6F,UAAAkU,IAAA,WACA,OAAAjW,GAAA6D,KAAAE,OAGAxE,GAAA,SAAA2W,GACA,IAAAhS,EAAAwM,EAAAE,EACA,iBAAA9P,GAAAoV,OAAA,GAAAA,GAAA,UACAtF,EAAAsF,GAAA,GACAxF,EAAAwF,GAAA,MACAhS,EAAA,IAAAgS,EACA,CAAAtF,EAAAF,EAAAxM,EAAA,KAEAG,QAAAC,KAAA,sBAAA4R,GACA,YAGA9V,GAAA,WACA,IAAA8D,EAAAwM,EAAAE,EAAApP,EAEA,OADAA,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,IACAoP,GAAA,KAAAF,GAAA,GAAAxM,GAGA7G,EAAA6Y,IAAA,SAAAA,GACA,WAAAha,EAAAga,EAAA,QAGAha,EAAA6F,UAAAmU,IAAA,SAAAvS,GAIA,OAHA,MAAAA,IACAA,EAAA,OAEAvD,GAAAyD,KAAAE,KAAAJ,IAGA/G,EAAAsZ,IAAA3W,GAEA7C,EAAAoH,KAAA,CACAK,EAAA,EACAC,KAAA,SAAAnI,GACA,OAAA0G,UAAAjB,QAAA,WAAAZ,GAAA7E,OAAA,GAAAA,GAAA,SACA,eAKA6B,EAAA,WACA,IAAAqY,EAAAC,EAAAhU,EAAA8B,EAAA6N,EAAAM,EAAA3B,EAAAwC,EAAA3Q,EAAA4B,EAAAyR,EAAAhF,EAAApP,EAAAiQ,EAAAW,EAAAyD,EAAAC,EAAAC,EAAA5E,EAAA6C,EAMA,GALA5R,EAAArB,GAAA4B,WACAuQ,EAAA9Q,EAAA,GAAA2P,EAAA3P,EAAA,GAAAgU,EAAAhU,EAAA,GACA2P,GAAA,IACArB,IAAA,QACAyF,EAAA,IAAApE,EACA,IAAAA,EACAnB,EAAAF,EAAAxM,EAAAkS,OAkBA,OAhBA,MAAAlD,IACAA,EAAA,GAEAA,EAAA,MACAA,GAAA,KAEAA,EAAA,IACAA,GAAA,KAEAA,GAAA,GACA3Q,EAAA1E,EAAAqV,GACAb,EAAAa,EAAA3Q,EACA4B,EAAAiS,GAAA,EAAArE,GACA6D,EAAAzR,EAAAgS,GAAA,EAAA9D,GACAlB,EAAAhN,EAAAgS,EAAA9D,EACA2B,EAAA7P,EAAAgS,EACA5T,GACA,OACAf,EAAA,CAAAwS,EAAA7C,EAAAhN,GAAAyM,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACA,MACA,OACAiQ,EAAA,CAAAmE,EAAA5B,EAAA7P,GAAAyM,EAAAa,EAAA,GAAAf,EAAAe,EAAA,GAAAvN,EAAAuN,EAAA,GACA,MACA,OACAW,EAAA,CAAAjO,EAAA6P,EAAA7C,GAAAP,EAAAwB,EAAA,GAAA1B,EAAA0B,EAAA,GAAAlO,EAAAkO,EAAA,GACA,MACA,OACAyD,EAAA,CAAA1R,EAAAyR,EAAA5B,GAAApD,EAAAiF,EAAA,GAAAnF,EAAAmF,EAAA,GAAA3R,EAAA2R,EAAA,GACA,MACA,OACAC,EAAA,CAAA3E,EAAAhN,EAAA6P,GAAApD,EAAAkF,EAAA,GAAApF,EAAAoF,EAAA,GAAA5R,EAAA4R,EAAA,GACA,MACA,OACAC,EAAA,CAAA/B,EAAA7P,EAAAyR,GAAAhF,EAAAmF,EAAA,GAAArF,EAAAqF,EAAA,GAAA7R,EAAA6R,EAAA,GAGA,OAAAnF,EAAAF,EAAAxM,EAAA9B,EAAAV,OAAA,EAAAU,EAAA,OAGAxC,GAAA,WACA,IAAAwW,EAAAlS,EAAA6N,EAAAiE,EAAAtF,EAAAwC,EAAA/Q,EAAAyO,EAAApP,EAwBA,OAvBAA,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAW,EAAAO,KAAAP,IAAAyO,EAAAF,EAAAxM,GACA9E,GAAAsD,KAAAtD,IAAAwR,EAAAF,EAAAxM,GACA8R,EAAA5W,GAAA+C,EACA4P,EAAA,IAAAiE,EAAA,IACAI,EAAAjU,GAAA,IAAA6T,GAAA,IACA,IAAAA,EACA9C,EAAAuC,OAAAC,KAEA9E,IAAAxR,KACA8T,GAAAxC,EAAAxM,GAAA8R,GAEAtF,IAAAtR,KACA8T,EAAA,GAAAhP,EAAA0M,GAAAoF,GAEA9R,IAAA9E,KACA8T,EAAA,GAAAtC,EAAAF,GAAAsF,GAEA9C,GAAA,GACAA,EAAA,IACAA,GAAA,MAGA,CAAAA,EAAAnB,EAAAqE,IAGA/Y,EAAAgZ,IAAA,WACA,gBAAAzT,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGL/U,EAAAyZ,IAAAvY,EAEA5B,EAAA6F,UAAAsU,IAAA,WACA,OAAAzW,GAAAiE,KAAAE,OAGAtG,EAAA,SAAA4X,GACA,IAAAiB,EAAAC,EAAAZ,EAAApT,EAAApD,EAAAoC,EAAAe,EAAAsB,EAEA,GADAyR,IAAA1T,cACA,MAAAtE,EAAAoT,QAAApT,EAAAoT,OAAA4E,GACA,OAAAtX,EAAAV,EAAAoT,OAAA4E,IAEA,GAAAlW,EAAAkW,EAAAH,MAAA,qDAEA,IADA5S,EAAAnD,EAAAgC,MAAA,KACAoB,EAAAhB,EAAA,EAAqBA,GAAA,EAAQgB,IAAAhB,EAC7Be,EAAAC,IAAAD,EAAAC,GAEAD,EAAA,UACK,GAAAnD,EAAAkW,EAAAH,MAAA,0EAEL,IADA5S,EAAAnD,EAAAgC,MAAA,KACAoB,EAAAqB,EAAA,EAAqBA,GAAA,EAAQrB,IAAAqB,EAC7BtB,EAAAC,IAAAD,EAAAC,QAEK,GAAApD,EAAAkW,EAAAH,MAAA,sFAEL,IADA5S,EAAAnD,EAAAgC,MAAA,KACAoB,EAAA+T,EAAA,EAAsBA,GAAA,EAAS/T,IAAA+T,EAC/BhU,EAAAC,GAAA9B,GAAA,KAAA6B,EAAAC,IAEAD,EAAA,UACK,GAAAnD,EAAAkW,EAAAH,MAAA,4GAEL,IADA5S,EAAAnD,EAAAgC,MAAA,KACAoB,EAAAgU,EAAA,EAAsBA,GAAA,EAAShU,IAAAgU,EAC/BjU,EAAAC,GAAA9B,GAAA,KAAA6B,EAAAC,IAEAD,EAAA,IAAAA,EAAA,QACKnD,EAAAkW,EAAAH,MAAA,sFACLS,EAAAxW,EAAAgC,MAAA,KACAwU,EAAA,QACAA,EAAA,QACArT,EAAApE,EAAAyX,GACArT,EAAA,OACKnD,EAAAkW,EAAAH,MAAA,6GACLS,EAAAxW,EAAAgC,MAAA,KACAwU,EAAA,QACAA,EAAA,QACArT,EAAApE,EAAAyX,GACArT,EAAA,IAAAnD,EAAA,IAEA,OAAAmD,GAGA3C,GAAA,SAAAuU,GACA,IAAAvQ,EAEA,OADAA,EAAAuQ,EAAA,kBACA,QAAAvQ,EACAA,EAAA,IAAAuQ,EAAA/S,MAAA,KAAA8S,IAAAxT,IAAA+V,KAAA,SACK,SAAA7S,EACLA,EAAA,IAAAuQ,EAAA/S,MAAA,KAAA8S,IAAAxT,IAAA+V,KAAA,SAAAtC,EAAA,YADK,GAOL1T,GAAA,SAAAyD,GACA,OAAAxD,GAAA,IAAAwD,GAAA,KAGAhG,EAAA,SAAA0X,EAAA9B,GACA,IAAAlQ,EAQA,OAPAA,EAAAkQ,EAAA,eACA8B,EAAA,GAAAnV,GAAAmV,EAAA,OACAA,EAAA,GAAAnV,GAAA,IAAAmV,EAAA,QACAA,EAAA,GAAAnV,GAAA,IAAAmV,EAAA,QACA,SAAAhS,IACAgS,EAAA,GAAA9B,GAEAlQ,EAAA,IAAAgS,EAAAa,KAAA,UAGA5Z,EAAAyY,IAAA,SAAAnC,GACA,OAAAzV,EAAAyV,IAGA7V,EAAAgY,IAAA,WACA,gBAAAzS,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGLzV,EAAA6F,UAAAsT,IAAA,SAAA1R,GAIA,OAHA,MAAAA,IACAA,EAAA,OAEA,QAAAA,EAAAxC,MAAA,KACAxB,GAAAkE,KAAAE,MACK,QAAAJ,EAAAxC,MAAA,KACLlD,EAAA4F,KAAA8R,MAAA9R,KAAAgQ,cADK,GAKLjX,EAAA6Z,MAAA,SAAAnV,GACA,OAAAvD,EAAAiD,GAAAM,KAGA5E,EAAAoH,KAAA,CACAK,EAAA,EACAC,KAAA,SAAAnI,GACA,OAAA0G,UAAAjB,QAAA,MAAAV,GAAA/E,GACA,iBAKAC,EAAA6F,UAAAT,KAAA,SAAArF,GACA,IAAAiX,EAAAa,EASA,IAAAA,KARApR,UAAAjB,SACAV,GAAA/E,KACA4H,KAAAE,KAAAhG,EAAAiD,GAAA/E,KAEA4H,KAAAE,KAAA,MAGAmP,EAAArP,KAAAU,IAAA,OACAvD,GACA,GAAAkS,IAAAlS,GAAA+S,GACA,OAAAA,EAGA,OAAAb,GAGArU,EAAA,WASA,IAAAkT,EAAAmB,EAAAvC,EAAAnP,EAGA,OAFAA,EAAAT,GAAA4B,WAAAgO,EAAAnP,EAAA,GAAAuQ,EAAAvQ,EAAA,GAAA0R,EAAA1R,EAAA,GACA0R,GAAA/W,EACA,CAAAwU,EAAAnT,EAAA0V,GAAAnB,EAAApR,GAAAuS,GAAAnB,IAGAjT,EAAA,WACA,IAAA4X,EAAAzS,EAAA7B,EAAA8B,EAAA6N,EAAArB,EAAAwC,EAAAvC,EAAAC,EAAApP,EAAAiQ,EAKA,OAJArP,EAAArB,GAAA4B,WACAgO,EAAAvO,EAAA,GAAA2P,EAAA3P,EAAA,GAAA8Q,EAAA9Q,EAAA,GACAZ,EAAA3C,EAAA8R,EAAAoB,EAAAmB,GAAAwD,EAAAlV,EAAA,GAAAyC,EAAAzC,EAAA,GAAA0C,EAAA1C,EAAA,GACAiQ,EAAA9S,EAAA+X,EAAAzS,EAAAC,GAAA0M,EAAAa,EAAA,GAAAf,EAAAe,EAAA,GAAAvN,EAAAuN,EAAA,GACA,CAAAb,EAAAF,EAAAxM,EAAA9B,EAAAV,OAAA,EAAAU,EAAA,OAGA1D,EAAA,WACA,IAAAuF,EAAAC,EAAA6N,EAAAmB,EAAAvC,EAAAnP,EAOA,OANAA,EAAAT,GAAA4B,WAAAgO,EAAAnP,EAAA,GAAAyC,EAAAzC,EAAA,GAAA0C,EAAA1C,EAAA,GACAuQ,EAAAnR,GAAAqD,IAAAC,KACAgP,GAAAnW,EAAAmH,EAAAD,GAAA1H,EAAA,SACA,IAAAkE,GAAA,IAAAsR,KACAmB,EAAAuC,OAAAC,KAEA,CAAA/E,EAAAoB,EAAAmB,IAGAhT,GAAA,WACA,IAAA+D,EAAAC,EAAAwM,EAAAC,EAAAC,EAAApP,EAAAiQ,EAGA,OAFAjQ,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAiQ,EAAAxR,GAAA2Q,EAAAF,EAAAxM,GAAAyM,EAAAc,EAAA,GAAAxN,EAAAwN,EAAA,GAAAvN,EAAAuN,EAAA,GACA/S,EAAAiS,EAAA1M,EAAAC,IAGA7G,EAAAsZ,IAAA,WACA,IAAAvU,EAEA,OADAA,EAAArB,GAAA4B,WACA,IAAAzG,EAAAkG,EAAA,QAGA/E,EAAAuZ,IAAA,WACA,IAAAxU,EAEA,OADAA,EAAArB,GAAA4B,WACA,IAAAzG,EAAAkG,EAAA,QAGAxF,EAAA+Z,IAAA7X,EAEAlC,EAAAga,IAAA,WACA,IAAA7E,EAAAmB,EAAAvC,EAAAnP,EAEA,OADAA,EAAAT,GAAA4B,WAAAuQ,EAAA1R,EAAA,GAAAuQ,EAAAvQ,EAAA,GAAAmP,EAAAnP,EAAA,GACA1C,EAAA,CAAA6R,EAAAoB,EAAAmB,KAGAhX,EAAA6F,UAAA4U,IAAA,WACA,OAAAzW,GAAA2D,KAAAE,OAGA7H,EAAA6F,UAAA6U,IAAA,WACA,OAAA1W,GAAA2D,KAAAE,MAAA8S,WAGAnX,GAAA,SAAAiE,GACA,IAAAO,EAAA6N,EAAAM,EAAA3B,EAAAqD,EAAA5U,EAAAyR,EAAApP,EAAAqP,EAaA,OAZA,MAAAlN,IACAA,EAAA,OAEAnC,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAoP,GAAA,IACAF,GAAA,IACAxM,GAAA,IACA6P,EAAA,EAAArR,KAAAtD,IAAAwR,EAAAlO,KAAAtD,IAAAsR,EAAAxM,IACAmO,EAAA0B,EAAA,OAAAA,GAAA,EACAhC,GAAA,EAAAnB,EAAAmD,GAAA1B,EACAlT,GAAA,EAAAuR,EAAAqD,GAAA1B,EACAxB,GAAA,EAAA3M,EAAA6P,GAAA1B,EACA,CAAAN,EAAA5S,EAAA0R,EAAAkD,IAGAxW,EAAA,WACA,IAAAsW,EAAAzR,EAAA8B,EAAA6N,EAAArB,EAAAqD,EAAA5U,EAAAyR,EAAAC,EAIA,OAHAzO,EAAArB,GAAA4B,WACAoP,EAAA3P,EAAA,GAAAjD,EAAAiD,EAAA,GAAAyO,EAAAzO,EAAA,GAAA2R,EAAA3R,EAAA,GACAyR,EAAAzR,EAAAV,OAAA,EAAAU,EAAA,KACA,IAAA2R,EACA,OAAAF,IAEAjD,EAAAmB,GAAA,WAAAA,IAAA,EAAAgC,GACArD,EAAAvR,GAAA,WAAAA,IAAA,EAAA4U,GACA7P,EAAA2M,GAAA,WAAAA,IAAA,EAAAkD,GACA,CAAAnD,EAAAF,EAAAxM,EAAA2P,KAGAjX,EAAAka,KAAA,WACA,OAAAvZ,EAAAwD,GAAA4B,aAGAtF,EAAAyZ,KAAA,WACA,gBAAAlU,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,yBAGLzV,EAAA6F,UAAA+U,KAAA,WACA,OAAApX,GAAAmE,KAAAE,OAGAnH,EAAAma,GAAA,WACA,IAAAxU,EAAAwR,EAAAxS,EAAAe,EAAA0R,EAWA,IAVA1R,EAAA,WACA,IAAAd,EAAAqF,EAGA,IAAAkN,KAFAvS,EAAAT,GAAA4B,WACAkE,EAAA,GACArF,EACAwS,EAAAxS,EAAAuS,GACAlN,EAAA/C,KAAAkQ,GAEA,OAAAnN,GACK7D,MAAAa,KAAAlB,WACLJ,EAAAhB,EAAA,EAAmBA,GAAA,EAAQgB,IAAAhB,EAC3Be,EAAAC,IAAA,IAEA,OAAAD,GAGAjF,EAAA0Z,GAAA,WACA,gBAAAnU,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,uBAGLzV,EAAA6F,UAAAgV,GAAA,WACA,IAAAzU,EAEA,OADAA,EAAAuB,KAAAE,KACA,CAAAzB,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KAGAnC,GAAA,SAAAyQ,EAAAF,EAAAxM,GACA,IAAA1C,EAKA,OAJAA,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAoP,EAAA1R,EAAA0R,GACAF,EAAAxR,EAAAwR,GACAxM,EAAAhF,EAAAgF,GACA,MAAA0M,EAAA,MAAAF,EAAA,MAAAxM,GAGAhF,EAAA,SAAAgD,GAEA,OADAA,GAAA,IACAA,GAAA,OACAA,EAAA,MAEAzC,IAAAyC,EAAA,kBAIAzD,EAAA,SAAAgV,EAAAC,EAAArB,EAAAlT,GACA,IAAAiV,EAAAC,EAGA,OAFAD,EAAAX,EAAA1P,KACAsQ,EAAAX,EAAA3P,KACA,IAAA7H,EAAAkY,EAAA,GAAA/B,GAAAgC,EAAA,GAAAD,EAAA,IAAAA,EAAA,GAAA/B,GAAAgC,EAAA,GAAAD,EAAA,IAAAA,EAAA,GAAA/B,GAAAgC,EAAA,GAAAD,EAAA,IAAAjV,IAGAtC,EAAAiH,KAAA,OAAArF,IAEAvC,EAAA6F,UAAAiV,UAAA,SAAAC,EAAAtT,GACA,IAAAuT,EAAAC,EAAAC,EAAAlD,EAAA9P,EAIA,OAHA,MAAAT,IACAA,EAAA,OAEAhB,UAAAjB,QAGAwS,EAAArQ,KAAAE,KACA,IAAAkT,EACA/C,EAAA,OAAArQ,KAAAE,KAAA,IACK,IAAAkT,EACL/C,EAAA,aAAArQ,KAAA,KAEAqT,EAAA/W,GAAA0D,KAAAE,MACAoT,EAAA,KACAC,EAAA,GACAhT,EAAA,SAAAuM,EAAAuC,GACA,IAAAmE,EAAAlY,EAGA,OAFAA,EAAAwR,EAAAvS,YAAA8U,EAAA,GAAAvP,GACA0T,EAAAlY,EAAA6X,YACAtU,KAAA5F,IAAAma,EAAAI,GAAAF,IAAAC,IACAjY,EAEAkY,EAAAJ,EACA7S,EAAAuM,EAAAxR,GAEAiF,EAAAjF,EAAA+T,IAGAgB,EADAgD,EAAAD,EACA7S,EAAA/G,EAAA,SAAAwG,MAAAqQ,OAEA9P,EAAAP,KAAAxG,EAAA,UAAA6W,QAGA7W,EAAA6W,GAAAL,MAAAhQ,KAAAgQ,UA7BA1T,GAAA0D,KAAAE,OAgCAlD,GAAA,SAAAyW,GACA,IAAApT,EAAAwM,EAAAE,EAAA2G,EAWA,OAVAA,EAAAD,EAAA,IACAC,EAAA,IACA3G,EAAA,IACAF,GAAA,uCAAAA,EAAA6G,EAAA,sBAAAtY,EAAAyR,GACAxM,EAAAqT,EAAA,wBAAArT,EAAAqT,EAAA,0CAAAtY,EAAAiF,KAEA0M,EAAA,qCAAAA,EAAA2G,EAAA,sBAAAtY,EAAA2R,GACAF,EAAA,sCAAAA,EAAA6G,EAAA,qBAAAtY,EAAAyR,GACAxM,EAAA,KAEA,CAAA0M,EAAAF,EAAAxM,IAGA7D,GAAA,WACA,IAAA6D,EAAAiT,EAAAK,EAAAC,EAAA7G,EAAApP,EAAAc,EAAAiV,EACA/V,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAA,EAAA,GAAA0C,EAAA1C,EAAA,GACAiW,EAAA,IACAD,EAAA,IACAL,EAAA,GACA,MAAAK,EAAAC,EAAAN,EACAI,EAAA,IAAAC,EAAAC,GACAnV,EAAAzB,GAAA0W,GACAjV,EAAA,GAAAA,EAAA,IAAA4B,EAAA0M,EACA4G,EAAAD,EAEAE,EAAAF,EAGA,OAAA9W,GAAA8W,IAGAla,EAAAqa,YAAAra,EAAAia,OAAA,WACA,gBAAA1U,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,gCAGL/U,EAAA8a,YAAA9a,EAAA0a,OAAA1a,EAAA+a,EAAA9W,GAEA3E,EAAA6F,UAAA2V,YAAA,WACA,OAAArX,GAAAwD,KAAAE,OAGA7H,EAAA6F,UAAAuV,OAAApb,EAAA6F,UAAA2V,YAEAra,EAAAua,SAAA,SAAA3T,EAAAC,GACA,IAAA2T,EAAAC,EAAAtW,EAAAiQ,EASA,MARA,YAAAjQ,EAAAV,GAAAmD,KAAA,WAAAzC,IACAyC,EAAA,IAAA/H,EAAA+H,IAEA,YAAAwN,EAAA3Q,GAAAoD,KAAA,WAAAuN,IACAvN,EAAA,IAAAhI,EAAAgI,IAEA2T,EAAA5T,EAAA+S,YACAc,EAAA5T,EAAA8S,YACAa,EAAAC,GACAD,EAAA,MAAAC,EAAA,MAEAA,EAAA,MAAAD,EAAA,MAIAxa,EAAA0a,SAAA,SAAA9T,EAAAC,EAAAP,GACA,IAAAqU,EAAAzV,EAAAsV,EAAAC,EAAAtW,EAAAiQ,EAAAwG,EAaA,IAAA1V,KAZA,MAAAoB,IACAA,EAAA,OAEA,YAAAnC,EAAAV,GAAAmD,KAAA,WAAAzC,IACAyC,EAAA,IAAA/H,EAAA+H,IAEA,YAAAwN,EAAA3Q,GAAAoD,KAAA,WAAAuN,IACAvN,EAAA,IAAAhI,EAAAgI,IAEA2T,EAAA5T,EAAA+Q,IAAArR,GACAmU,EAAA5T,EAAA8Q,IAAArR,GACAsU,EAAA,EACAJ,EACAG,GAAAH,EAAAtV,IAAA,IAAAuV,EAAAvV,IAAA,GACA0V,GAAAD,IAEA,OAAAtV,KAAA9B,KAAAqX,IAGA5a,EAAA6a,OAAA,SAAAjU,EAAAC,EAAAwS,EAAAyB,GACA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5G,EAAA6G,EAAA1X,EAAAiQ,EAAAW,EAAAyD,EAAAsD,EAAAC,EAAAC,EAAAlI,EAAAmI,EAAAC,EAAAC,EACA,MAAA9C,IACAA,EAAA,GAEA,MAAAyB,IACAA,EAAA,GAEA,YAAA3W,EAAAV,GAAAmD,KAAA,WAAAzC,IACAyC,EAAA,IAAA/H,EAAA+H,IAEA,YAAAwN,EAAA3Q,GAAAoD,KAAA,WAAAuN,IACAvN,EAAA,IAAAhI,EAAAgI,IAEAkO,EAAAnO,EAAAyN,MAAA0G,EAAAhG,EAAA,GAAAkG,EAAAlG,EAAA,GAAAoG,EAAApG,EAAA,GACAyD,EAAA3R,EAAAwN,MAAA2G,EAAAxC,EAAA,GAAA0C,EAAA1C,EAAA,GAAA4C,EAAA5C,EAAA,GACA6C,EAAA9X,GAAA0X,IAAAE,KACAG,EAAA/X,GAAA2X,IAAAE,KACAY,EAAAjB,EAAA,gBAAAA,GAAA,SAAAA,GACAe,EAAA,MAAAT,GAAA,QAAAA,GAAA,KACAQ,EAAAR,EAAA,WAAA3b,EAAAyb,EAAAF,GAAAjc,EACA,MAAA6c,EAAA,EACAA,GAAA,IAEA,MAAAA,GAAA,IACAA,GAAA,IAcA,OAZA/H,EAAA+H,GAAA,KAAAA,GAAA,QAAApc,EAAA,GAAAU,EAAAnB,GAAA6c,EAAA,eAAApc,EAAA,GAAAU,EAAAnB,GAAA6c,EAAA,UACAN,EAAAF,QACArG,EAAAzR,GAAAgY,KAAA,OACAQ,EAAAD,GAAA9G,EAAAlB,EAAA,EAAAkB,GACA4G,EAAAb,EAAAC,EACAW,EAAAN,EAAAC,EACAG,EAAAR,EAAAC,EACAQ,EAAAP,EAAAC,EACAI,EAAAC,IAAAC,IAAAC,IACAM,EAAAL,GAAAvC,EAAA2C,GACAE,EAAAP,GAAAb,EAAAgB,GACAK,EAAAJ,EACAxY,GAAA0Y,IAAAC,IAAAV,GAAAW,OAGAtd,EAAA6F,UAAAiT,IAAA,SAAAyE,GACA,IAAAC,EAAAnX,EAAAmB,EAAAC,EAAAnC,EAAAmY,EAIA,OAHAjW,EAAAG,KACArC,EAAAiY,EAAAhY,MAAA,KAAAkC,EAAAnC,EAAA,GAAAkY,EAAAlY,EAAA,GACAmY,EAAAjW,EAAAC,KACA+V,GACAnX,EAAAoB,EAAAiW,QAAAF,GACAnX,GAAA,EACAoX,EAAApX,GAEA8B,QAAAC,KAAA,mBAAAoV,EAAA,YAAA/V,IAGAgW,GAIAzd,EAAA6F,UAAA8X,IAAA,SAAAJ,EAAAK,GACA,IAAAJ,EAAAnX,EAAAmB,EAAAC,EAAAnC,EAAAmY,EAGA,GAFAjW,EAAAG,KACArC,EAAAiY,EAAAhY,MAAA,KAAAkC,EAAAnC,EAAA,GAAAkY,EAAAlY,EAAA,GACAkY,EAGA,GAFAC,EAAAjW,EAAAC,KACApB,EAAAoB,EAAAiW,QAAAF,GACAnX,GAAA,EACA,cAAAzB,GAAAgZ,GACA,OAAAA,EAAAtG,OAAA,IACA,QACAmG,EAAApX,KAAAuX,EACA,MACA,QACAH,EAAApX,KAAAuX,EACA,MACA,QACAH,EAAApX,KAAAuX,EAAA3E,OAAA,GACA,MACA,QACAwE,EAAApX,KAAAuX,EAAA3E,OAAA,GACA,MACA,QACAwE,EAAApX,IAAAuX,OAGAH,EAAApX,GAAAuX,OAGAzV,QAAAC,KAAA,mBAAAoV,EAAA,YAAA/V,QAGAgW,EAAAG,EAEA,OAAAzc,EAAAsc,EAAAhW,GAAAkQ,MAAAnQ,EAAAmQ,UAGA3X,EAAA6F,UAAAgY,QAAA,WACA,OAAAlW,KAAAE,KAAAvB,WAAA,GAGAtG,EAAA6F,UAAA8R,MAAA,SAAA5P,GACA,OAAAtB,UAAAjB,OACArE,EAAAiF,IAAA,CAAAuB,KAAAE,KAAA,GAAAF,KAAAE,KAAA,GAAAF,KAAAE,KAAA,GAAAE,IAEAJ,KAAAE,KAAA,IAGA7H,EAAA6F,UAAArE,OAAA,SAAAsc,GACA,IAAAtI,EAAAhO,EAOA,OANA,MAAAsW,IACAA,EAAA,GAEAtW,EAAAG,KACA6N,EAAAhO,EAAAgO,MACAA,EAAA,IAAAtV,EAAAmV,GAAAyI,EACA3c,EAAAqU,OAAAmC,MAAAnQ,EAAAmQ,UAGA3X,EAAA6F,UAAAkY,SAAA,SAAAD,GAIA,OAHA,MAAAA,IACAA,EAAA,GAEAnW,KAAAnG,QAAAsc,IAGA9d,EAAA6F,UAAAmY,OAAAhe,EAAA6F,UAAArE,OAEAxB,EAAA6F,UAAAoY,SAAAje,EAAA6F,UAAAkY,SAEA/d,EAAA6F,UAAAqY,SAAA,SAAAJ,GACA,IAAArD,EAAAjT,EAUA,OATA,MAAAsW,IACAA,EAAA,GAEAtW,EAAAG,KACA8S,EAAAjT,EAAAiT,MACAA,EAAA,IAAAqD,EAAA5d,EAAAmV,GACAoF,EAAA,OACAA,EAAA,MAEAtZ,EAAAsZ,OAAA9C,MAAAnQ,EAAAmQ,UAGA3X,EAAA6F,UAAAsY,WAAA,SAAAL,GAIA,OAHA,MAAAA,IACAA,EAAA,GAEAnW,KAAAuW,UAAAJ,IAGA9d,EAAA6F,UAAAuY,YAAA,WACA,IAAArW,EAAA3B,EAGA,OAFAA,EAAAuB,KAAAvB,MACA2B,EAAAJ,KAAAgQ,QACAxW,EAAAiF,EAAA,GAAA2B,EAAA3B,EAAA,GAAA2B,EAAA3B,EAAA,GAAA2B,MAGAhH,EAAA,SAAAsd,EAAAC,EAAA7W,GACA,IAAA1G,EAAA0G,GACA,2BAAAA,EAEA,OAAA1G,EAAA0G,GAAA4W,EAAAC,IAGAtd,EAAA,SAAAmV,GACA,gBAAAkI,EAAAC,GACA,IAAAC,EAAA/B,EAGA,OAFA+B,EAAApd,EAAAmd,GAAAlY,MACAoW,EAAArb,EAAAkd,GAAAjY,MACAjF,EAAAgV,EAAAoI,EAAA/B,GAAA,SAIA9a,EAAA,SAAAyU,GACA,gBAAAoI,EAAA/B,GACA,IAAAnW,EAAAhB,EAAAmZ,EAEA,IADAA,EAAA,GACAnY,EAAAhB,EAAA,EAAqBA,GAAA,EAAQgB,IAAAhB,EAC7BmZ,EAAAnY,GAAA8P,EAAAoI,EAAAlY,GAAAmW,EAAAnW,IAEA,OAAAmY,IAIApb,GAAA,SAAA2E,EAAAC,GACA,OAAAD,GAGA5E,GAAA,SAAA4E,EAAAC,GACA,OAAAD,EAAAC,EAAA,KAGAxG,EAAA,SAAAuG,EAAAC,GACA,OAAAD,EAAAC,EACAA,EAEAD,GAIAlF,EAAA,SAAAkF,EAAAC,GACA,OAAAD,EAAAC,EACAD,EAEAC,GAIAxD,GAAA,SAAAuD,EAAAC,GACA,iBAAAD,EAAA,QAAAC,EAAA,OAGA1E,GAAA,SAAAyE,EAAAC,GACA,OAAAA,EAAA,IACA,EAAAD,EAAAC,EAAA,IAEA,YAAAD,EAAA,QAAAC,EAAA,OAIA9G,EAAA,SAAA6G,EAAAC,GACA,iBAAAA,EAAA,MAAAD,EAAA,OAGAtG,EAAA,SAAAsG,EAAAC,GACA,aAAAD,EACA,KAEAA,EAAAC,EAAA,WAAAD,EAAA,KACAA,EAAA,IACA,IAEAA,IAIAhH,EAAAqC,OAAApC,EAAAU,EAAA0B,KAEArC,EAAAoC,SAAAnC,EAAAU,EAAAyB,KAEApC,EAAAyD,OAAAxD,EAAAU,EAAA8C,KAEAzD,EAAAuC,QAAAtC,EAAAU,EAAA4B,KAEAvC,EAAAS,OAAAR,EAAAU,EAAAF,IAEAT,EAAA8B,QAAA7B,EAAAU,EAAAmB,IAEA9B,EAAAU,MAAAT,EAAAU,EAAAD,IAEAV,EAAAG,KAAAF,EAAAU,EAAAR,IAEAC,EAAAJ,QAEAI,EAAAsd,QAAA,SAAAC,GACA,IAAAvZ,EAAAE,EAAAqP,EAAAiK,EAQA,IAPAjK,EAAA,CACAzO,IAAAsT,OAAAqF,UACA1b,KAAA,EAAAqW,OAAAqF,UACAC,IAAA,EACAC,OAAA,GACAC,MAAA,GAEA1Z,EAAA,EAAAF,EAAAuZ,EAAAlZ,OAAkCH,EAAAF,EAASE,IAC3CsZ,EAAAD,EAAArZ,GACA,MAAAsZ,GAAA9J,MAAA8J,KACAjK,EAAAoK,OAAAlX,KAAA+W,GACAjK,EAAAmK,KAAAF,EACAA,EAAAjK,EAAAzO,MACAyO,EAAAzO,IAAA0Y,GAEAA,EAAAjK,EAAAxR,MACAwR,EAAAxR,IAAAyb,GAEAjK,EAAAqK,OAAA,GAOA,OAJArK,EAAAsK,OAAA,CAAAtK,EAAAzO,IAAAyO,EAAAxR,KACAwR,EAAAuK,OAAA,SAAAxX,EAAAuS,GACA,OAAA7Y,EAAA8d,OAAAvK,EAAAjN,EAAAuS,IAEAtF,GAGAvT,EAAAiV,MAAA,SAAA7B,EAAA2K,GACA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9J,EAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,EAoUA,OAnUAX,EAAA,MACAC,EAAAze,EAAA,QACA6e,EAAA,GACA,EACAT,EAAA,MACAQ,EAAA,GACAD,EAAA,MACAX,GAAA,EACAE,EAAA,GACAQ,GAAA,EACAH,EAAA,EACAD,EAAA,EACAH,GAAA,EACAF,EAAA,GACAa,GAAA,EACAT,EAAA,EACAa,EAAA,SAAA9L,GACA,IAAAsB,EAAAuC,EAAA/S,EAAAC,EAAAiQ,EAAA7N,EAOA,GANA,MAAA6M,IACAA,EAAA,iBAEA,MAAAA,GAAA,WAAA3P,GAAA2P,IAAA,MAAApT,EAAAF,SACAsT,EAAApT,EAAAF,OAAAsT,IAAApT,EAAAF,OAAAsT,EAAA9O,gBAAA8O,GAEA,UAAA3P,GAAA2P,GAAA,CAKA,IAJA,IAAAA,EAAA/O,SACA+O,EAAA,CAAAA,EAAA,GAAAA,EAAA,KAEAA,IAAAtP,MAAA,GACA4Q,EAAAxQ,EAAA,EAAAC,EAAAiP,EAAA/O,OAAA,EAAgD,GAAAF,EAAAD,GAAAC,EAAAD,GAAAC,EAAgCuQ,EAAA,GAAAvQ,IAAAD,MAChF+S,EAAA7D,EAAAsB,GACA,WAAAjR,GAAAwT,KACA7D,EAAAsB,GAAA1U,EAAAiX,IAIA,IADA2H,EAAAva,OAAA,EACAqQ,EAAAnO,EAAA,EAAA6N,EAAAhB,EAAA/O,OAAA,EAAiD,GAAA+P,EAAA7N,GAAA6N,EAAA7N,GAAA6N,EAAmCM,EAAA,GAAAN,IAAA7N,MACpFqY,EAAAnY,KAAAiO,GAAAtB,EAAA/O,OAAA,IAIA,OADA4a,IACAf,EAAA9K,GAEA2L,EAAA,SAAAtC,GACA,IAAAvX,EAAAtG,EACA,SAAAof,EAAA,CACApf,EAAAof,EAAA3Z,OAAA,EACAa,EAAA,EACA,MAAAA,EAAAtG,GAAA6d,GAAAuB,EAAA9Y,GACAA,IAEA,OAAAA,EAAA,EAEA,UAEAia,EAAA,SAAArL,GACA,OAAAA,GAEA,SAAA2I,GACA,IAAAvX,EAAAka,EAAAC,EAAAzgB,EAAA4e,EASA,OARAA,EAAAf,EACAuB,EAAA3Z,OAAA,IACAzF,EAAAof,EAAA3Z,OAAA,EACAa,EAAA6Z,EAAAtC,GACA4C,EAAArB,EAAA,IAAAA,EAAA,GAAAA,EAAA,UAAAa,GACAO,EAAApB,EAAApf,EAAA,IAAAof,EAAApf,GAAAof,EAAApf,EAAA,UAAAigB,GACArB,EAAAe,GAAAP,EAAA9Y,GAAA,IAAA8Y,EAAA9Y,EAAA,GAAA8Y,EAAA9Y,IAAAma,IAAAD,EAAAC,IAAAf,EAAAC,IAEAf,GAEAwB,EAAA,SAAAxB,EAAA8B,GACA,IAAA5K,EAAAuC,EAAA/R,EAAAwR,EAAAxS,EAAA4C,EAAA3C,EAAA2P,EAIA,GAHA,MAAAwL,IACAA,GAAA,GAEA5L,MAAA8J,IAAA,OAAAA,EACA,OAAAiB,EAuBA,GArBAa,EAUAxL,EAAA0J,EATAQ,KAAA3Z,OAAA,GACAqQ,EAAAqK,EAAAvB,GACA1J,EAAAY,GAAAsJ,EAAA3Z,OAAA,IAEAyP,EADSwK,IAAAC,GACTf,EAAAe,IAAAD,EAAAC,GAEA,EAKAe,IACAxL,EAAAqL,EAAArL,IAEA,IAAAuK,IACAvK,EAAA1R,GAAA0R,EAAAuK,IAEAvK,EAAA6K,EAAA,GAAA7K,GAAA,EAAA6K,EAAA,GAAAA,EAAA,IACA7K,EAAAzO,KAAAP,IAAA,EAAAO,KAAAtD,IAAA,EAAA+R,IACA4C,EAAArR,KAAA7E,MAAA,IAAAsT,GACAgL,GAAAb,EAAAvH,GACAO,EAAAgH,EAAAvH,OACO,CACP,aAAAjT,GAAAya,GACA,IAAAhZ,EAAAhB,EAAA,EAAAC,EAAAya,EAAAva,OAAA,EAAgD,GAAAF,EAAAD,GAAAC,EAAAD,GAAAC,EAAgCe,EAAA,GAAAf,IAAAD,MAAA,CAEhF,GADA4C,EAAA8X,EAAA1Z,GACA4O,GAAAhN,EAAA,CACAmQ,EAAAiH,EAAAhZ,GACA,MAEA,GAAA4O,GAAAhN,GAAA5B,IAAA0Z,EAAAva,OAAA,GACA4S,EAAAiH,EAAAhZ,GACA,MAEA,GAAA4O,EAAAhN,GAAAgN,EAAA8K,EAAA1Z,EAAA,IACA4O,KAAAhN,IAAA8X,EAAA1Z,EAAA,GAAA4B,GACAmQ,EAAAjX,EAAAe,YAAAmd,EAAAhZ,GAAAgZ,EAAAhZ,EAAA,GAAA4O,EAAA0K,GACA,WAGS,aAAA/a,GAAAya,KACTjH,EAAAiH,EAAApK,IAEAgL,IACAb,EAAAvH,GAAAO,GAGA,OAAAA,GAEAgI,EAAA,WACA,OAAAhB,EAAA,IAEAiB,EAAA9L,GACA4B,EAAA,SAAA2B,GACA,IAAAjC,EAEA,OADAA,EAAA1U,EAAAgf,EAAArI,IACA+H,GAAAhK,EAAAgK,GACAhK,EAAAgK,KAEAhK,GAGAM,EAAAuK,QAAA,SAAAA,GACA,IAAA5E,EACA,aAAA4E,GACA,UAAA9b,GAAA8b,IACAvB,EAAAuB,EACAnB,EAAA,CAAAmB,EAAA,GAAAA,IAAAlb,OAAA,MAEAsW,EAAA3a,EAAAsd,QAAAc,GAEAJ,EADA,IAAAuB,EACA,CAAA5E,EAAA7V,IAAA6V,EAAA5Y,KAEA/B,EAAA8d,OAAAnD,EAAA,IAAA4E,IAGAvK,GAEAgJ,GAEAhJ,EAAA6I,OAAA,SAAAA,GACA,IAAAnJ,EAAAiG,EAAAjE,EAAA1S,EAAAE,EAAAC,EAAAoC,EACA,IAAAjB,UAAAjB,OACA,OAAA+Z,EAMA,GAJAG,EAAAV,EAAA,GACAS,EAAAT,IAAAxZ,OAAA,GACAua,EAAA,GACAlI,EAAAwH,EAAA7Z,OACAwZ,EAAAxZ,SAAAqS,GAAA6H,IAAAD,EACA,IAAApa,EAAA,EAAAF,EAAA6Z,EAAAxZ,OAAwCH,EAAAF,EAASE,IACjDyW,EAAAkD,EAAA3Z,GACA0a,EAAAnY,MAAAkU,EAAA4D,IAAAD,EAAAC,SAGA,IAAA7J,EAAAnO,EAAA,EAAApC,EAAAuS,EAAA,EAAoC,GAAAvS,EAAAoC,GAAApC,EAAAoC,GAAApC,EAAgCuQ,EAAA,GAAAvQ,IAAAoC,MACpEqY,EAAAnY,KAAAiO,GAAAgC,EAAA,IAIA,OADA0H,EAAA,CAAAG,EAAAD,GACAtJ,GAEAA,EAAA1O,KAAA,SAAAkZ,GACA,OAAAla,UAAAjB,QAGAma,EAAAgB,EACAP,IACAjK,GAJAwJ,GAMAxJ,EAAAyK,MAAA,SAAArM,EAAAwL,GAEA,OADAM,EAAA9L,EAAAwL,GACA5J,GAEAA,EAAAqI,IAAA,SAAAqC,GAEA,OADAhB,EAAAgB,EACA1K,GAEAA,EAAA2K,OAAA,SAAAnC,GACA,OAAAlY,UAAAjB,QAGAwa,EAAArB,EACAxI,GAHA6J,GAKA7J,EAAA4K,iBAAA,SAAAjJ,GAyCA,OAxCA,MAAAA,IACAA,GAAA,GAEAwH,EAAAxH,EACAsI,IAEAE,EADAhB,EACA,SAAArK,GACA,IAAA+L,EAAA9E,EAAA+E,EAAAC,EAAAC,EAAAjG,EAAAkG,EAAAhM,EAAAF,EACA8L,EAAAb,EAAA,MAAA3K,MAAA,GACA0G,EAAAiE,EAAA,MAAA3K,MAAA,GACA4L,EAAAJ,EAAA9E,EACA+E,EAAAd,EAAAlL,GAAA,GAAAO,MAAA,GACA2L,EAAAH,GAAA9E,EAAA8E,GAAA/L,EACAiM,EAAAD,EAAAE,EACA/L,EAAA,EACAF,EAAA,EACAgG,EAAA,GACA,MAAA1U,KAAA5F,IAAAsgB,GAAA,KAAAhG,KAAA,GACA,WACAkG,IACAF,IAAA,GAEAA,EAAA,GACA9L,EAAAH,EACAA,GAAA,IAAAC,EAAAD,KAEAC,EAAAD,EACAA,GAAA,IAAAG,EAAAH,IAEAgM,EAAAd,EAAAlL,GAAA,GAAAO,MAAA,GACA0L,EAAAD,EAAAE,GAZA,GAeA,OAAAlM,GAGA,SAAAA,GACA,OAAAA,GAGAkB,GAEAA,EAAAkL,QAAA,SAAApZ,GACA,aAAAA,GACA,WAAArD,GAAAqD,KACAA,EAAA,CAAAA,MAEA6X,EAAA7X,EACAkO,GAEA2J,GAGA3J,EAAA5B,OAAA,SAAA+M,EAAA9C,GACA,IAAA+C,EAAAC,EAAAnb,EAAAf,EAAAuB,EAAA8D,EAAA8W,EAAA/Z,EAKA,GAJAjB,UAAAjB,OAAA,IACAgZ,EAAA,OAEA3X,EAAA,GACA,IAAAJ,UAAAjB,OACAqB,EAAAwY,EAAApa,MAAA,QACO,OAAAqc,EACPza,EAAA,CAAAsP,EAAA,UACO,GAAAmL,EAAA,EACPE,EAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAiC,EACA3a,EAAA,WACA8D,EAAA,GACA,QAAAtF,EAAA,EAAyB,GAAAic,EAAAjc,EAAAic,EAAAjc,EAAAic,EAAgD,GAAAA,EAAAjc,QAA6BsF,EAAA/C,KAAAvC,GACtG,OAAAsF,GACS7D,MAAAa,MAAAoQ,IAAA,SAAA1R,GACT,OAAA8P,EAAAqL,EAAAnb,GAAAib,EAAA,GAAAC,SAEO,CAGP,GAFAhN,EAAA,GACAkN,EAAA,GACAtC,KAAA3Z,OAAA,EACA,IAAAa,EAAAqB,EAAA,EAAApC,EAAA6Z,EAAA3Z,OAAgD,GAAAF,EAAAoC,EAAApC,EAAAoC,EAAApC,EAA8Be,EAAA,GAAAf,IAAAoC,MAC9E+Z,EAAA7Z,KAAA,IAAAuX,EAAA9Y,EAAA,GAAA8Y,EAAA9Y,UAGAob,EAAAlC,EAEA1Y,EAAA4a,EAAA1J,IAAA,SAAAD,GACA,OAAA3B,EAAA2B,KAQA,OALA3W,EAAAqd,KACA3X,IAAAkR,IAAA,SAAAlC,GACA,OAAAA,EAAA2I,QAGA3X,GAEAsP,EAAAuL,MAAA,SAAA7L,GACA,aAAAA,GACAoK,EAAApK,EACAM,GAEA8J,GAGA9J,EAAAM,MAAA,SAAAjC,GACA,aAAAA,GACAgL,EAAAhL,EACA2B,GAEAqJ,GAGArJ,EAAAwL,OAAA,SAAA7F,GACA,aAAAA,GACA8D,EAAAze,EAAA2a,GACA3F,GAEAyJ,GAGAzJ,GAGA,MAAAhV,EAAAygB,SACAzgB,EAAAygB,OAAA,IAGAzgB,EAAAygB,OAAAC,KAAA,WACA,OAAA1gB,EAAAiV,MAAA,CAAAjV,EAAAsY,IAAA,UAAAtY,EAAAsY,IAAA,cAGAtY,EAAAygB,OAAAE,IAAA,WACA,OAAA3gB,EAAAiV,MAAA,6CAAA3O,KAAA,QAGAtG,EAAAsd,QAAA,SAAAC,EAAAhU,EAAAqX,GACA,IAAAC,EAAAnK,EAAA1S,EAAAE,EAAAqP,EAAAiK,EAAAsD,EAqCA,GApCAvN,EAAA,CACAzO,IAAAsT,OAAAqF,UACA1b,KAAA,EAAAqW,OAAAqF,UACAC,IAAA,EACAC,OAAA,GACAC,MAAA,GAEA,MAAAgD,IACAA,EAAA,WACA,WAGAC,EAAA,SAAArD,GACA,MAAAA,GAAA9J,MAAA8J,KACAjK,EAAAoK,OAAAlX,KAAA+W,GACAjK,EAAAmK,KAAAF,EACAA,EAAAjK,EAAAzO,MACAyO,EAAAzO,IAAA0Y,GAEAA,EAAAjK,EAAAxR,MACAwR,EAAAxR,IAAAyb,GAEAjK,EAAAqK,OAAA,IAGAkD,EAAA,SAAAtD,EAAA9G,GACA,GAAAkK,EAAApD,EAAA9G,GACA,aAAAnN,GAAA,aAAA9F,GAAA8F,GACAsX,EAAAtX,EAAAiU,IACS,MAAAjU,GAAA,WAAA9F,GAAA8F,IAAA,WAAA9F,GAAA8F,GACTsX,EAAArD,EAAAjU,IAEAsX,EAAArD,IAIA,UAAA/Z,GAAA8Z,GACA,IAAArZ,EAAA,EAAAF,EAAAuZ,EAAAlZ,OAAoCH,EAAAF,EAASE,IAC7CsZ,EAAAD,EAAArZ,GACA4c,EAAAtD,QAGA,IAAA9G,KAAA6G,EACAC,EAAAD,EAAA7G,GACAoK,EAAAtD,EAAA9G,GAOA,OAJAnD,EAAAsK,OAAA,CAAAtK,EAAAzO,IAAAyO,EAAAxR,KACAwR,EAAAuK,OAAA,SAAAxX,EAAAuS,GACA,OAAA7Y,EAAA8d,OAAAvK,EAAAjN,EAAAuS,IAEAtF,GAGAvT,EAAA8d,OAAA,SAAAP,EAAAjX,EAAAuS,GACA,IAAAI,EAAAC,EAAA6H,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7c,EAAA8c,EAAAC,EAAAnE,EAAAoE,EAAApd,EAAAqd,EAAAC,EAAAxjB,EAAAyjB,EAAAC,EAAApe,EAAA4C,EAAAyb,EAAAC,EAAAre,EAAAiQ,EAAAqO,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9N,EAAAyD,EAAAC,EAAAC,EAAAoK,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAxM,GAAA8F,GAAAkB,GAAApX,GAgBA,GAfA,MAAAD,IACAA,EAAA,SAEA,MAAAuS,IACAA,EAAA,GAEA,UAAApV,GAAA8Z,KACAA,EAAAvd,EAAAsd,QAAAC,IAEAzY,EAAAyY,EAAAzY,IACA/C,GAAAwb,EAAAxb,IACAwb,EAAAG,IACAC,GAAAJ,EAAAI,OAAAhX,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAC,IAEA,IAAAgS,EACA,OAAA/T,EAAA/C,IAOA,GALA+b,EAAA,GACA,MAAAxX,EAAAwR,OAAA,OACAgG,EAAArX,KAAA3B,GACAgZ,EAAArX,KAAA1E,KAEA,MAAAuE,EAAAwR,OAAA,MAEA,IADAgG,EAAArX,KAAA3B,GACAI,EAAAhB,EAAA,EAAAC,EAAA0U,EAAA,EAAoC,GAAA1U,EAAAD,GAAAC,EAAAD,GAAAC,EAAgCe,EAAA,GAAAf,IAAAD,MACpE4Z,EAAArX,KAAA3B,EAAAI,EAAA2T,GAAA9W,GAAA+C,IAEAgZ,EAAArX,KAAA1E,SACK,SAAAuE,EAAAwR,OAAA,MACL,GAAAhT,GAAA,EACA,2DAKA,IAHAqd,EAAA9c,KAAA+d,OAAAxhB,EAAAkD,GACAod,EAAA7c,KAAA+d,OAAAxhB,EAAAG,IACA+b,EAAArX,KAAA3B,GACAI,EAAAqB,GAAA,EAAA6N,EAAAyE,EAAA,EAAqC,GAAAzE,EAAA7N,IAAA6N,EAAA7N,IAAA6N,EAAmClP,EAAA,GAAAkP,IAAA7N,QACxEuX,EAAArX,KAAArE,GAAA,GAAA+f,EAAAjd,EAAA2T,GAAAqJ,EAAAC,KAEArE,EAAArX,KAAA1E,SACK,SAAAuE,EAAAwR,OAAA,MAEL,IADAgG,EAAArX,KAAA3B,GACAI,EAAA+T,EAAA,EAAAlE,EAAA8D,EAAA,EAAsC,GAAA9D,EAAAkE,GAAAlE,EAAAkE,GAAAlE,EAAqC7P,EAAA,GAAA6P,IAAAkE,MAC3EnS,GAAA6W,GAAAtZ,OAAA,GAAAa,EAAA2T,EACA0J,EAAA/hB,EAAAsG,GACAyb,IAAAzb,EACAgX,EAAArX,KAAAkX,GAAA4E,KAEAC,EAAA1b,EAAAyb,EACAzE,EAAArX,KAAAkX,GAAA4E,IAAA,EAAAC,GAAA7E,GAAA4E,EAAA,GAAAC,IAGA1E,EAAArX,KAAA1E,SACK,SAAAuE,EAAAwR,OAAA,MAeL,IARAlZ,EAAA+e,GAAAtZ,OACAqd,EAAA,IAAA1c,MAAApG,GACAkjB,EAAA,IAAA9c,MAAA6T,GACAqK,IAAA,EACAb,EAAA,EACAT,EAAA,KACAA,EAAA,GACAA,EAAAnb,KAAA3B,GACAI,EAAAgU,EAAA,EAAAV,EAAAK,EAAA,EAAsC,GAAAL,EAAAU,GAAAV,EAAAU,GAAAV,EAAqCtT,EAAA,GAAAsT,IAAAU,MAC3E0I,EAAAnb,KAAA3B,EAAAI,EAAA2T,GAAA9W,GAAA+C,IAEA8c,EAAAnb,KAAA1E,IACA,MAAAmhB,GAAA,CACA,IAAAlB,EAAAjB,EAAA,EAAAtI,EAAAI,EAAA,EAAwC,GAAAJ,EAAAsI,GAAAtI,EAAAsI,GAAAtI,EAAqCuJ,EAAA,GAAAvJ,IAAAsI,MAC7Ee,EAAAE,GAAA,EAEA,IAAA9c,EAAA8b,EAAA,EAAAtI,EAAA9Z,EAAA,EAAsC,GAAA8Z,EAAAsI,GAAAtI,EAAAsI,GAAAtI,EAAqCxT,EAAA,GAAAwT,IAAAsI,MAAA,CAG3E,IAFAvE,GAAAkB,GAAAzY,GACAkd,EAAAhK,OAAAqF,UACAuE,EAAAf,EAAA,EAAA6B,EAAAjK,EAAA,EAA0C,GAAAiK,EAAA7B,GAAA6B,EAAA7B,GAAA6B,EAAqCd,EAAA,GAAAc,IAAA7B,MAC/Ec,EAAAtiB,EAAAmiB,EAAAI,GAAAvF,IACAsF,EAAAK,IACAA,EAAAL,EACAJ,EAAAK,GAGAF,EAAAH,KACAD,EAAAxc,GAAAyc,EAGA,IADAW,EAAA,IAAAtd,MAAA6T,GACAmJ,EAAAd,EAAA,EAAA6B,EAAAlK,EAAA,EAAwC,GAAAkK,EAAA7B,GAAA6B,EAAA7B,GAAA6B,EAAqCf,EAAA,GAAAe,IAAA7B,MAC7EoB,EAAAN,GAAA,KAEA,IAAA9c,EAAAic,EAAA,EAAA6B,GAAApkB,EAAA,EAAsC,GAAAokB,GAAA7B,GAAA6B,GAAA7B,GAAA6B,GAAqC9d,EAAA,GAAA8d,KAAA7B,MAC3EU,EAAAH,EAAAxc,GACA,OAAAod,EAAAT,GACAS,EAAAT,GAAAlE,GAAAzY,GAEAod,EAAAT,IAAAlE,GAAAzY,GAGA,IAAA8c,EAAAZ,EAAA,EAAA6B,GAAApK,EAAA,EAAwC,GAAAoK,GAAA7B,GAAA6B,GAAA7B,GAAA6B,GAAqCjB,EAAA,GAAAiB,KAAA7B,MAC7EkB,EAAAN,IAAA,EAAAF,EAAAE,GAGA,IADAkB,IAAA,EACAlB,EAAAX,EAAA,EAAAoB,EAAA5J,EAAA,EAAyC,GAAA4J,EAAApB,GAAAoB,EAAApB,GAAAoB,EAAwCT,EAAA,GAAAS,IAAApB,MACjF,GAAAiB,EAAAN,KAAAJ,EAAA1c,GAAA,CACAge,IAAA,EACA,MAGAtB,EAAAU,EACAD,IACAA,EAAA,MACAa,IAAA,GAIA,IADAjB,EAAA,GACAD,EAAAV,EAAA,EAAAoB,EAAA7J,EAAA,EAAuC,GAAA6J,EAAApB,GAAAoB,EAAApB,GAAAoB,EAAwCV,EAAA,GAAAU,IAAApB,MAC/EW,EAAAD,GAAA,GAEA,IAAA9c,EAAAqc,EAAA,EAAAoB,EAAA/jB,EAAA,EAAqC,GAAA+jB,EAAApB,GAAAoB,EAAApB,GAAAoB,EAAwCzd,EAAA,GAAAyd,IAAApB,MAC7EM,EAAAH,EAAAxc,GACA+c,EAAAJ,GAAApb,KAAAkX,GAAAzY,IAGA,IADAie,GAAA,GACAnB,EAAAR,EAAA,EAAAoB,EAAA/J,EAAA,EAAuC,GAAA+J,EAAApB,GAAAoB,EAAApB,GAAAoB,EAAwCZ,EAAA,GAAAY,IAAApB,MAC/E2B,GAAA1c,KAAAwb,EAAAD,GAAA,IACAmB,GAAA1c,KAAAwb,EAAAD,GAAAC,EAAAD,GAAA3d,OAAA,IAMA,IAJA8e,MAAAxc,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAC,IAEAiX,EAAArX,KAAA0c,GAAA,IACAje,EAAAuc,EAAA,EAAAoB,EAAAM,GAAA9e,OAAA,EAA0Dod,GAAAoB,EAAa3d,EAAAuc,GAAA,EACvE9K,GAAAwM,GAAAje,GACAwO,MAAAiD,MAAA,IAAAmH,EAAAvB,QAAA5F,KACAmH,EAAArX,KAAAkQ,IAIA,OAAAmH,GAGAnd,EAAA,SAAAkV,EAAAE,EAAA7Q,GAMA,IAAAH,EAAA8B,EAAAwM,EAAAE,EAyBA,OAxBAxO,EAAArB,GAAA4B,WACAuQ,EAAA9Q,EAAA,GAAAgR,EAAAhR,EAAA,GAAAG,EAAAH,EAAA,GACA2O,MAAAmC,KACAA,EAAA,GAEAA,GAAA,IACAA,EAAA,KACAhP,GAAA,EAAAkP,GAAA,EACAxC,GAAA,EAAAwC,EAAA5V,EAAAhB,EAAA0W,GAAA1V,EAAAlB,EAAAE,EAAA0W,IAAA,EACAxC,EAAA,GAAAxM,EAAA0M,IACKsC,EAAA,KACLA,GAAA,IACAtC,GAAA,EAAAwC,GAAA,EACA1C,GAAA,EAAA0C,EAAA5V,EAAAhB,EAAA0W,GAAA1V,EAAAlB,EAAAE,EAAA0W,IAAA,EACAhP,EAAA,GAAA0M,EAAAF,KAEAwC,GAAA,IACAxC,GAAA,EAAA0C,GAAA,EACAlP,GAAA,EAAAkP,EAAA5V,EAAAhB,EAAA0W,GAAA1V,EAAAlB,EAAAE,EAAA0W,IAAA,EACAtC,EAAA,GAAAF,EAAAxM,IAEA0M,EAAA5R,EAAAuD,EAAAqO,EAAA,GACAF,EAAA1R,EAAAuD,EAAAmO,EAAA,GACAxM,EAAAlF,EAAAuD,EAAA2B,EAAA,GACA,KAAA0M,EAAA,IAAAF,EAAA,IAAAxM,EAAA9B,EAAAV,OAAA,EAAAU,EAAA,OAGAtC,GAAA,WAMA,IAAAoE,EAAAwM,EAAAwC,EAAA3Q,EAAAJ,EAAAyO,EAAApP,EAAA4R,EAoBA,OAnBA5R,EAAAT,GAAA4B,WAAAiO,EAAApP,EAAA,GAAAkP,EAAAlP,EAAA,GAAA0C,EAAA1C,EAAA,GACAhF,EAAA,EAAAkG,KAAArG,GACAuU,GAAA,IACAF,GAAA,IACAxM,GAAA,IACA/B,EAAAO,KAAAP,IAAAyO,EAAAF,EAAAxM,GACA3B,GAAAqO,EAAAF,EAAAxM,GAAA,EACAkP,EAAA,EAAAjR,EAAAI,EACA,IAAA6Q,EACAF,EAAA,GAEAA,GAAAtC,EAAAF,GAAAE,EAAA1M,IAAA,EACAgP,GAAAxQ,KAAA9B,MAAAgQ,EAAAF,IAAAE,EAAAF,IAAAE,EAAA1M,IAAAwM,EAAAxM,IACAgP,EAAAxQ,KAAAge,KAAAxN,GACAhP,EAAAwM,IACAwC,EAAA1W,EAAA0W,GAEAA,GAAA1W,GAEA,KAAA0W,EAAAE,EAAA7Q,IAGAlF,EAAAsjB,IAAA,WACA,gBAAA/d,EAAAR,EAAAS,GACAA,EAAAd,UAAAa,EAAAb,UACA,IAAAe,EAAA,IAAAD,EAAAE,EAAAH,EAAAI,MAAAF,EAAAV,GACA,OAAAN,OAAAiB,SAAAD,EAHA,CAIK5G,EAAAiF,GAAAc,KAAAU,WAAAgP,OAAA,wBAGL/U,EAAA+jB,IAAA3iB,EAEA9B,EAAA6F,UAAA4e,IAAA,WACA,OAAA7gB,GAAA+D,KAAAE,OAGA1F,EAAA,SAAAoV,EAAAC,EAAArB,EAAAlT,GACA,IAAA0T,EAAAH,EAAAkO,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/M,EAAAC,EAgDA,MA/CA,QAAAlV,GACAiV,EAAAX,EAAAkC,MACAtB,EAAAX,EAAAiC,OACK,QAAAxW,GACLiV,EAAAX,EAAAwC,MACA5B,EAAAX,EAAAuC,OACK,QAAA9W,GACLiV,EAAAX,EAAA4C,MACAhC,EAAAX,EAAA2C,OACK,QAAAlX,GACLiV,EAAAX,EAAAkN,MACAtM,EAAAX,EAAAiN,OACK,QAAAxhB,GAAA,QAAAA,IACLA,EAAA,MACAiV,EAAAX,EAAAmD,MACAvC,EAAAX,EAAAkD,OAEA,MAAAzX,EAAAgW,OAAA,OACAyL,EAAAxM,EAAA,GAAA8M,EAAA9M,EAAA,GAAA2M,EAAA3M,EAAA,GACAyM,EAAAxM,EAAA,GAAA8M,EAAA9M,EAAA,GAAA2M,EAAA3M,EAAA,IAEAtD,MAAA6P,IAAA7P,MAAA8P,GASK9P,MAAA6P,GAKA7P,MAAA8P,GAMLnO,EAAA+C,OAAAC,KALAhD,EAAAmO,EACA,IAAAE,GAAA,IAAAA,GAAA,QAAA5hB,IACA8hB,EAAAE,KAPAzO,EAAAkO,EACA,IAAAI,GAAA,IAAAA,GAAA,QAAA7hB,IACA8hB,EAAAC,KAVArO,EADAgO,EAAAD,GAAAC,EAAAD,EAAA,IACAC,GAAAD,EAAA,KACOC,EAAAD,KAAAC,EAAA,IACPA,EAAA,IAAAD,EAEAC,EAAAD,EAEAlO,EAAAkO,EAAAvO,EAAAQ,GAcA,MAAAoO,IACAA,EAAAC,EAAA7O,GAAA8O,EAAAD,IAEAJ,EAAAC,EAAA1O,GAAA2O,EAAAD,GACA1jB,EAAA8B,GAAAuT,EAAAuO,EAAAH,IAGAjkB,IAAA8U,OAAA,WACA,IAAAtQ,EAAAE,EAAAC,EAAAqF,EAGA,IAFArF,EAAA,sCACAqF,EAAA,GACAtF,EAAA,EAAAF,EAAAG,EAAAE,OAAiCH,EAAAF,EAASE,IAC1CpC,EAAAqC,EAAAD,GACAsF,EAAA/C,KAAA,CAAA3E,EAAAd,IAEA,OAAAwI,EARA,IAWArI,EAAA,SAAAiV,EAAAC,EAAArB,EAAAlT,GACA,IAAAiiB,EAAAC,EAGA,OAFAD,EAAA3N,EAAAyC,MACAmL,EAAA3N,EAAAwC,MACA7Y,EAAA6Y,IAAAkL,GAAAC,EAAAD,GAAA/O,EAAA,QAGAxV,EAAAiH,KAAA,OAAAtF,IAEAF,EAAA,SAAAmV,EAAAC,EAAArB,EAAAlT,GACA,IAAAiV,EAAAC,EAGA,OAFAD,EAAAX,EAAA/B,MACA2C,EAAAX,EAAAhC,MACA,IAAAxV,EAAAkY,EAAA,GAAA/B,GAAAgC,EAAA,GAAAD,EAAA,IAAAA,EAAA,GAAA/B,GAAAgC,EAAA,GAAAD,EAAA,IAAAA,EAAA,GAAA/B,GAAAgC,EAAA,GAAAD,EAAA,IAAAjV,IAGAtC,EAAAiH,KAAA,OAAAxF,MAEC2D,KAAA4B,4ECprFD,IAAAyd,EAAA,WAA0B,IAAAC,EAAA1d,KAAa2d,EAAAD,EAAAE,eAA0BtL,EAAAoL,EAAAG,MAAAvL,IAAAqL,EAAwB,OAAArL,EAAA,OAAiBwL,YAAA,qBAAgC,CAAAxL,EAAA,MAAWwL,YAAA,yCAAoDJ,EAAAK,GAAAL,EAAA,gBAAA/f,EAAAF,GACzM,IAAAwY,EAAAtY,EAAAsY,MACA,OAAA3D,EAAA,MAAgBwL,YAAA,gCAAAE,MAAAN,EAAAO,QAAAxgB,IAAsE,CAAA6U,EAAA,QAAawL,YAAA,wDAAmE,CAAAJ,EAAAQ,GAAA,aAAAR,EAAAS,GAAA1gB,GAAA,cAAA6U,EAAA,QAA4DwL,YAAA,mFAA8F,CAAAxL,EAAA,QAAawL,YAAA,6CAAwD,CAAAJ,EAAAQ,GAAA,eAAAR,EAAAS,GAAAlI,EAAAvV,KAAA,gBAAA4R,EAAA,UAAuEwL,YAAA,2BAAAM,GAAA,CAA2CC,MAAA,SAAAC,GAAyBZ,EAAAa,UAAAtI,EAAAvV,QAA2B,CAAA4R,EAAA,MAAWkM,MAAA,CAAOC,KAAA,YAAgB,aAC7kBC,EAAA,4DCqBAC,EAAA,WAAAtE,IAAAuE,EAAA,YAEA,IAAAC,EAAA,CACAC,WAAA,CACAH,KAAA,YAEAI,MAAA,CACAnS,OAAA,CACA3P,KAAAgB,SAGA+gB,QAAA,CACAf,QADA,SACAxgB,GACA,OACAwhB,gBAAAjf,KAAA4M,OAAAnP,GAAAwY,MAAAvV,IACAwe,MAAAlf,KAAAmf,aAAA1hB,KAGA0hB,aAPA,SAOA1hB,GACA,IAAAiD,EAAAV,KAAA4M,OAAAnP,GAAAwY,MAAAvV,IACA,OAAA0e,EAAAhf,EAAA2T,SAAArT,EAAA,6BC5C0V2e,EAAA,0BCQ1VC,EAAgBrhB,OAAAshB,EAAA,KAAAthB,CACdohB,EACA5B,EACAiB,GACF,EACA,KACA,WACA,MAIAY,EAAAE,QAAAC,OAAA,uBACeC,EAAA,WAAAJ","file":"js/PalettePresenter.742deb2a.js","sourcesContent":["import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PalettePresenter.vue?vue&type=style&index=0&id=0ffff514&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PalettePresenter.vue?vue&type=style&index=0&id=0ffff514&lang=scss&scoped=true&\"","\n/**\n * @license\n *\n * chroma.js - JavaScript library for color conversions\n * \n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * \n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n(function() {\n  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,\n    slice = [].slice;\n\n  type = (function() {\n\n    /*\n    for browser-safe type checking+\n    ported from jQuery's $.type\n     */\n    var classToType, len, name, o, ref;\n    classToType = {};\n    ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\n    for (o = 0, len = ref.length; o < len; o++) {\n      name = ref[o];\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\n    }\n    return function(obj) {\n      var strType;\n      strType = Object.prototype.toString.call(obj);\n      return classToType[strType] || \"object\";\n    };\n  })();\n\n  limit = function(x, min, max) {\n    if (min == null) {\n      min = 0;\n    }\n    if (max == null) {\n      max = 1;\n    }\n    if (x < min) {\n      x = min;\n    }\n    if (x > max) {\n      x = max;\n    }\n    return x;\n  };\n\n  unpack = function(args) {\n    if (args.length >= 3) {\n      return Array.prototype.slice.call(args);\n    } else {\n      return args[0];\n    }\n  };\n\n  clip_rgb = function(rgb) {\n    var i, o;\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (i = o = 0; o < 3; i = ++o) {\n      if (i < 3) {\n        if (rgb[i] < 0 || rgb[i] > 255) {\n          rgb._clipped = true;\n        }\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 255) {\n          rgb[i] = 255;\n        }\n      } else if (i === 3) {\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 1) {\n          rgb[i] = 1;\n        }\n      }\n    }\n    if (!rgb._clipped) {\n      delete rgb._unclipped;\n    }\n    return rgb;\n  };\n\n  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;\n\n  TWOPI = PI * 2;\n\n  PITHIRD = PI / 3;\n\n  DEG2RAD = PI / 180;\n\n  RAD2DEG = 180 / PI;\n\n  chroma = function() {\n    if (arguments[0] instanceof Color) {\n      return arguments[0];\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, arguments, function(){});\n  };\n\n  chroma[\"default\"] = chroma;\n\n  _interpolators = [];\n\n  if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n    module.exports = chroma;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return chroma;\n    });\n  } else {\n    root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n    root.chroma = chroma;\n  }\n\n  chroma.version = '1.4.1';\n\n  _input = {};\n\n  _guess_formats = [];\n\n  _guess_formats_sorted = false;\n\n  Color = (function() {\n    function Color() {\n      var arg, args, chk, len, len1, me, mode, o, w;\n      me = this;\n      args = [];\n      for (o = 0, len = arguments.length; o < len; o++) {\n        arg = arguments[o];\n        if (arg != null) {\n          args.push(arg);\n        }\n      }\n      if (args.length > 1) {\n        mode = args[args.length - 1];\n      }\n      if (_input[mode] != null) {\n        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));\n      } else {\n        if (!_guess_formats_sorted) {\n          _guess_formats = _guess_formats.sort(function(a, b) {\n            return b.p - a.p;\n          });\n          _guess_formats_sorted = true;\n        }\n        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {\n          chk = _guess_formats[w];\n          mode = chk.test.apply(chk, args);\n          if (mode) {\n            break;\n          }\n        }\n        if (mode) {\n          me._rgb = clip_rgb(_input[mode].apply(_input, args));\n        }\n      }\n      if (me._rgb == null) {\n        console.warn('unknown format: ' + args);\n      }\n      if (me._rgb == null) {\n        me._rgb = [0, 0, 0];\n      }\n      if (me._rgb.length === 3) {\n        me._rgb.push(1);\n      }\n    }\n\n    Color.prototype.toString = function() {\n      return this.hex();\n    };\n\n    return Color;\n\n  })();\n\n  chroma._input = _input;\n\n\n  /**\n  \tColorBrewer colors for chroma.js\n  \n  \tCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The \n  \tPennsylvania State University.\n  \n  \tLicensed under the Apache License, Version 2.0 (the \"License\"); \n  \tyou may not use this file except in compliance with the License.\n  \tYou may obtain a copy of the License at\t\n  \thttp://www.apache.org/licenses/LICENSE-2.0\n  \n  \tUnless required by applicable law or agreed to in writing, software distributed\n  \tunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n  \tCONDITIONS OF ANY KIND, either express or implied. See the License for the\n  \tspecific language governing permissions and limitations under the License.\n  \n      @preserve\n   */\n\n  chroma.brewer = brewer = {\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n  };\n\n  (function() {\n    var key, results;\n    results = [];\n    for (key in brewer) {\n      results.push(brewer[key.toLowerCase()] = brewer[key]);\n    }\n    return results;\n  })();\n\n\n  /**\n  \tX11 color names\n  \n  \thttp://www.w3.org/TR/css3-color/#svg-color\n   */\n\n  w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflower: '#6495ed',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n\n  chroma.colors = colors = w3cx11;\n\n  lab2rgb = function() {\n    var a, args, b, g, l, r, x, y, z;\n    args = unpack(arguments);\n    l = args[0], a = args[1], b = args[2];\n    y = (l + 16) / 116;\n    x = isNaN(a) ? y : y + a / 500;\n    z = isNaN(b) ? y : y - b / 200;\n    y = LAB_CONSTANTS.Yn * lab_xyz(y);\n    x = LAB_CONSTANTS.Xn * lab_xyz(x);\n    z = LAB_CONSTANTS.Zn * lab_xyz(z);\n    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\n    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  xyz_rgb = function(r) {\n    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\n  };\n\n  lab_xyz = function(t) {\n    if (t > LAB_CONSTANTS.t1) {\n      return t * t * t;\n    } else {\n      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\n    }\n  };\n\n  LAB_CONSTANTS = {\n    Kn: 18,\n    Xn: 0.950470,\n    Yn: 1,\n    Zn: 1.088830,\n    t0: 0.137931034,\n    t1: 0.206896552,\n    t2: 0.12841855,\n    t3: 0.008856452\n  };\n\n  rgb2lab = function() {\n    var b, g, r, ref, ref1, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n  };\n\n  rgb_xyz = function(r) {\n    if ((r /= 255) <= 0.04045) {\n      return r / 12.92;\n    } else {\n      return pow((r + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  xyz_lab = function(t) {\n    if (t > LAB_CONSTANTS.t3) {\n      return pow(t, 1 / 3);\n    } else {\n      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\n    }\n  };\n\n  rgb2xyz = function() {\n    var b, g, r, ref, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = rgb_xyz(r);\n    g = rgb_xyz(g);\n    b = rgb_xyz(b);\n    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);\n    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);\n    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);\n    return [x, y, z];\n  };\n\n  chroma.lab = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['lab']), function(){});\n  };\n\n  _input.lab = lab2rgb;\n\n  Color.prototype.lab = function() {\n    return rgb2lab(this._rgb);\n  };\n\n  bezier = function(colors) {\n    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;\n    colors = (function() {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = colors.length; o < len; o++) {\n        c = colors[o];\n        results.push(chroma(c));\n      }\n      return results;\n    })();\n    if (colors.length === 2) {\n      ref = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref[0], lab1 = ref[1];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push(lab0[i] + t * (lab1[i] - lab0[i]));\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 3) {\n      ref1 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 4) {\n      ref2 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 5) {\n      I0 = bezier(colors.slice(0, 3));\n      I1 = bezier(colors.slice(2, 5));\n      I = function(t) {\n        if (t < 0.5) {\n          return I0(t * 2);\n        } else {\n          return I1((t - 0.5) * 2);\n        }\n      };\n    }\n    return I;\n  };\n\n  chroma.bezier = function(colors) {\n    var f;\n    f = bezier(colors);\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    return f;\n  };\n\n  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {\n    var dh, dl, f;\n    if (start == null) {\n      start = 300;\n    }\n    if (rotations == null) {\n      rotations = -1.5;\n    }\n    if (hue == null) {\n      hue = 1;\n    }\n    if (gamma == null) {\n      gamma = 1;\n    }\n    if (lightness == null) {\n      lightness = [0, 1];\n    }\n    dh = 0;\n    if (type(lightness) === 'array') {\n      dl = lightness[1] - lightness[0];\n    } else {\n      dl = 0;\n      lightness = [lightness, lightness];\n    }\n    f = function(fract) {\n      var a, amp, b, cos_a, g, h, l, r, sin_a;\n      a = TWOPI * ((start + 120) / 360 + rotations * fract);\n      l = pow(lightness[0] + dl * fract, gamma);\n      h = dh !== 0 ? hue[0] + fract * dh : hue;\n      amp = h * l * (1 - l) / 2;\n      cos_a = cos(a);\n      sin_a = sin(a);\n      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n      b = l + amp * (+1.97294 * cos_a);\n      return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n    };\n    f.start = function(s) {\n      if (s == null) {\n        return start;\n      }\n      start = s;\n      return f;\n    };\n    f.rotations = function(r) {\n      if (r == null) {\n        return rotations;\n      }\n      rotations = r;\n      return f;\n    };\n    f.gamma = function(g) {\n      if (g == null) {\n        return gamma;\n      }\n      gamma = g;\n      return f;\n    };\n    f.hue = function(h) {\n      if (h == null) {\n        return hue;\n      }\n      hue = h;\n      if (type(hue) === 'array') {\n        dh = hue[1] - hue[0];\n        if (dh === 0) {\n          hue = hue[1];\n        }\n      } else {\n        dh = 0;\n      }\n      return f;\n    };\n    f.lightness = function(h) {\n      if (h == null) {\n        return lightness;\n      }\n      if (type(h) === 'array') {\n        lightness = h;\n        dl = h[1] - h[0];\n      } else {\n        lightness = [h, h];\n        dl = 0;\n      }\n      return f;\n    };\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    f.hue(hue);\n    return f;\n  };\n\n  chroma.random = function() {\n    var code, digits, i, o;\n    digits = '0123456789abcdef';\n    code = '#';\n    for (i = o = 0; o < 6; i = ++o) {\n      code += digits.charAt(floor(Math.random() * 16));\n    }\n    return new Color(code);\n  };\n\n  _interpolators = [];\n\n  interpolate = function(col1, col2, f, m) {\n    var interpol, len, o, res;\n    if (f == null) {\n      f = 0.5;\n    }\n    if (m == null) {\n      m = 'rgb';\n    }\n\n    /*\n    interpolates between colors\n    f = 0 --> me\n    f = 1 --> col\n     */\n    if (type(col1) !== 'object') {\n      col1 = chroma(col1);\n    }\n    if (type(col2) !== 'object') {\n      col2 = chroma(col2);\n    }\n    for (o = 0, len = _interpolators.length; o < len; o++) {\n      interpol = _interpolators[o];\n      if (m === interpol[0]) {\n        res = interpol[1](col1, col2, f, m);\n        break;\n      }\n    }\n    if (res == null) {\n      throw \"color mode \" + m + \" is not supported\";\n    }\n    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n  };\n\n  chroma.interpolate = interpolate;\n\n  Color.prototype.interpolate = function(col2, f, m) {\n    return interpolate(this, col2, f, m);\n  };\n\n  chroma.mix = interpolate;\n\n  Color.prototype.mix = Color.prototype.interpolate;\n\n  _input.rgb = function() {\n    var k, ref, results, v;\n    ref = unpack(arguments);\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(v);\n    }\n    return results;\n  };\n\n  chroma.rgb = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['rgb']), function(){});\n  };\n\n  Color.prototype.rgb = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (round) {\n      return this._rgb.map(Math.round).slice(0, 3);\n    } else {\n      return this._rgb.slice(0, 3);\n    }\n  };\n\n  Color.prototype.rgba = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (!round) {\n      return this._rgb.slice(0);\n    }\n    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];\n  };\n\n  _guess_formats.push({\n    p: 3,\n    test: function(n) {\n      var a;\n      a = unpack(arguments);\n      if (type(a) === 'array' && a.length === 3) {\n        return 'rgb';\n      }\n      if (a.length === 4 && type(a[3]) === \"number\" && a[3] >= 0 && a[3] <= 1) {\n        return 'rgb';\n      }\n    }\n  });\n\n  _input.lrgb = _input.rgb;\n\n  interpolate_lrgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);\n  };\n\n  _average_lrgb = function(colors) {\n    var col, f, len, o, rgb, xyz;\n    f = 1 / colors.length;\n    xyz = [0, 0, 0, 0];\n    for (o = 0, len = colors.length; o < len; o++) {\n      col = colors[o];\n      rgb = col._rgb;\n      xyz[0] += pow(rgb[0], 2) * f;\n      xyz[1] += pow(rgb[1], 2) * f;\n      xyz[2] += pow(rgb[2], 2) * f;\n      xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    if (xyz[3] > 1) {\n      xyz[3] = 1;\n    }\n    return new Color(clip_rgb(xyz));\n  };\n\n  _interpolators.push(['lrgb', interpolate_lrgb]);\n\n  chroma.average = function(colors, mode) {\n    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    l = colors.length;\n    colors = colors.map(function(c) {\n      return chroma(c);\n    });\n    first = colors.splice(0, 1)[0];\n    if (mode === 'lrgb') {\n      return _average_lrgb(colors);\n    }\n    xyz = first.get(mode);\n    cnt = [];\n    dx = 0;\n    dy = 0;\n    for (i in xyz) {\n      xyz[i] = xyz[i] || 0;\n      cnt.push(isNaN(xyz[i]) ? 0 : 1);\n      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n        A = xyz[i] / 180 * PI;\n        dx += cos(A);\n        dy += sin(A);\n      }\n    }\n    alpha = first.alpha();\n    for (o = 0, len = colors.length; o < len; o++) {\n      c = colors[o];\n      xyz2 = c.get(mode);\n      alpha += c.alpha();\n      for (i in xyz) {\n        if (!isNaN(xyz2[i])) {\n          cnt[i] += 1;\n          if (mode.charAt(i) === 'h') {\n            A = xyz2[i] / 180 * PI;\n            dx += cos(A);\n            dy += sin(A);\n          } else {\n            xyz[i] += xyz2[i];\n          }\n        }\n      }\n    }\n    for (i in xyz) {\n      if (mode.charAt(i) === 'h') {\n        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n        while (A < 0) {\n          A += 360;\n        }\n        while (A >= 360) {\n          A -= 360;\n        }\n        xyz[i] = A;\n      } else {\n        xyz[i] = xyz[i] / cnt[i];\n      }\n    }\n    return chroma(xyz, mode).alpha(alpha / l);\n  };\n\n  hex2rgb = function(hex) {\n    var a, b, g, r, rgb, u;\n    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\n      if (hex.length === 4 || hex.length === 7) {\n        hex = hex.substr(1);\n      }\n      if (hex.length === 3) {\n        hex = hex.split(\"\");\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n      }\n      u = parseInt(hex, 16);\n      r = u >> 16;\n      g = u >> 8 & 0xFF;\n      b = u & 0xFF;\n      return [r, g, b, 1];\n    }\n    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {\n      if (hex.length === 9) {\n        hex = hex.substr(1);\n      }\n      u = parseInt(hex, 16);\n      r = u >> 24 & 0xFF;\n      g = u >> 16 & 0xFF;\n      b = u >> 8 & 0xFF;\n      a = round((u & 0xFF) / 0xFF * 100) / 100;\n      return [r, g, b, a];\n    }\n    if ((_input.css != null) && (rgb = _input.css(hex))) {\n      return rgb;\n    }\n    throw \"unknown color: \" + hex;\n  };\n\n  rgb2hex = function(channels, mode) {\n    var a, b, g, hxa, r, str, u;\n    if (mode == null) {\n      mode = 'auto';\n    }\n    r = channels[0], g = channels[1], b = channels[2], a = channels[3];\n    if (mode === 'auto') {\n      mode = a < 1 ? 'rgba' : 'rgb';\n    }\n    r = Math.round(r);\n    g = Math.round(g);\n    b = Math.round(b);\n    u = r << 16 | g << 8 | b;\n    str = \"000000\" + u.toString(16);\n    str = str.substr(str.length - 6);\n    hxa = '0' + round(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    return \"#\" + (function() {\n      switch (mode.toLowerCase()) {\n        case 'rgba':\n          return str + hxa;\n        case 'argb':\n          return hxa + str;\n        default:\n          return str;\n      }\n    })();\n  };\n\n  _input.hex = function(h) {\n    return hex2rgb(h);\n  };\n\n  chroma.hex = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hex']), function(){});\n  };\n\n  Color.prototype.hex = function(mode) {\n    if (mode == null) {\n      mode = 'auto';\n    }\n    return rgb2hex(this._rgb, mode);\n  };\n\n  _guess_formats.push({\n    p: 4,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"string\") {\n        return 'hex';\n      }\n    }\n  });\n\n  hsl2rgb = function() {\n    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;\n    args = unpack(arguments);\n    h = args[0], s = args[1], l = args[2];\n    if (s === 0) {\n      r = g = b = l * 255;\n    } else {\n      t3 = [0, 0, 0];\n      c = [0, 0, 0];\n      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      t1 = 2 * l - t2;\n      h /= 360;\n      t3[0] = h + 1 / 3;\n      t3[1] = h;\n      t3[2] = h - 1 / 3;\n      for (i = o = 0; o <= 2; i = ++o) {\n        if (t3[i] < 0) {\n          t3[i] += 1;\n        }\n        if (t3[i] > 1) {\n          t3[i] -= 1;\n        }\n        if (6 * t3[i] < 1) {\n          c[i] = t1 + (t2 - t1) * 6 * t3[i];\n        } else if (2 * t3[i] < 1) {\n          c[i] = t2;\n        } else if (3 * t3[i] < 2) {\n          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\n        } else {\n          c[i] = t1;\n        }\n      }\n      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];\n    }\n    if (args.length > 3) {\n      return [r, g, b, args[3]];\n    } else {\n      return [r, g, b];\n    }\n  };\n\n  rgb2hsl = function(r, g, b) {\n    var h, l, min, ref, s;\n    if (r !== void 0 && r.length >= 3) {\n      ref = r, r = ref[0], g = ref[1], b = ref[2];\n    }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    l = (max + min) / 2;\n    if (max === min) {\n      s = 0;\n      h = Number.NaN;\n    } else {\n      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n    }\n    if (r === max) {\n      h = (g - b) / (max - min);\n    } else if (g === max) {\n      h = 2 + (b - r) / (max - min);\n    } else if (b === max) {\n      h = 4 + (r - g) / (max - min);\n    }\n    h *= 60;\n    if (h < 0) {\n      h += 360;\n    }\n    return [h, s, l];\n  };\n\n  chroma.hsl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsl']), function(){});\n  };\n\n  _input.hsl = hsl2rgb;\n\n  Color.prototype.hsl = function() {\n    return rgb2hsl(this._rgb);\n  };\n\n  hsv2rgb = function() {\n    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;\n    args = unpack(arguments);\n    h = args[0], s = args[1], v = args[2];\n    v *= 255;\n    if (s === 0) {\n      r = g = b = v;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = v * (1 - s);\n      q = v * (1 - s * f);\n      t = v * (1 - s * (1 - f));\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsv = function() {\n    var b, delta, g, h, min, r, ref, s, v;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    v = max / 255.0;\n    if (max === 0) {\n      h = Number.NaN;\n      s = 0;\n    } else {\n      s = delta / max;\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, s, v];\n  };\n\n  chroma.hsv = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsv']), function(){});\n  };\n\n  _input.hsv = hsv2rgb;\n\n  Color.prototype.hsv = function() {\n    return rgb2hsv(this._rgb);\n  };\n\n  num2rgb = function(num) {\n    var b, g, r;\n    if (type(num) === \"number\" && num >= 0 && num <= 0xFFFFFF) {\n      r = num >> 16;\n      g = (num >> 8) & 0xFF;\n      b = num & 0xFF;\n      return [r, g, b, 1];\n    }\n    console.warn(\"unknown num color: \" + num);\n    return [0, 0, 0, 1];\n  };\n\n  rgb2num = function() {\n    var b, g, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    return (r << 16) + (g << 8) + b;\n  };\n\n  chroma.num = function(num) {\n    return new Color(num, 'num');\n  };\n\n  Color.prototype.num = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2num(this._rgb, mode);\n  };\n\n  _input.num = num2rgb;\n\n  _guess_formats.push({\n    p: 1,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"number\" && n >= 0 && n <= 0xFFFFFF) {\n        return 'num';\n      }\n    }\n  });\n\n  hcg2rgb = function() {\n    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;\n    args = unpack(arguments);\n    h = args[0], c = args[1], _g = args[2];\n    c = c / 100;\n    g = g / 100 * 255;\n    _c = c * 255;\n    if (c === 0) {\n      r = g = b = _g;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = _g * (1 - c);\n      q = p + _c * (1 - f);\n      t = p + _c * f;\n      v = p + _c;\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hcg = function() {\n    var _g, b, c, delta, g, h, min, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    c = delta * 100 / 255;\n    _g = min / (255 - delta) * 100;\n    if (delta === 0) {\n      h = Number.NaN;\n    } else {\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, c, _g];\n  };\n\n  chroma.hcg = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hcg']), function(){});\n  };\n\n  _input.hcg = hcg2rgb;\n\n  Color.prototype.hcg = function() {\n    return rgb2hcg(this._rgb);\n  };\n\n  css2rgb = function(css) {\n    var aa, ab, hsl, i, m, o, rgb, w;\n    css = css.toLowerCase();\n    if ((chroma.colors != null) && chroma.colors[css]) {\n      return hex2rgb(chroma.colors[css]);\n    }\n    if (m = css.match(/rgb\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = o = 0; o <= 2; i = ++o) {\n        rgb[i] = +rgb[i];\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = w = 0; w <= 3; i = ++w) {\n        rgb[i] = +rgb[i];\n      }\n    } else if (m = css.match(/rgb\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = aa = 0; aa <= 2; i = ++aa) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = ab = 0; ab <= 2; i = ++ab) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = +rgb[3];\n    } else if (m = css.match(/hsl\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = 1;\n    } else if (m = css.match(/hsla\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = +m[4];\n    }\n    return rgb;\n  };\n\n  rgb2css = function(rgba) {\n    var mode;\n    mode = rgba[3] < 1 ? 'rgba' : 'rgb';\n    if (mode === 'rgb') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';\n    } else if (mode === 'rgba') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';\n    } else {\n\n    }\n  };\n\n  rnd = function(a) {\n    return round(a * 100) / 100;\n  };\n\n  hsl2css = function(hsl, alpha) {\n    var mode;\n    mode = alpha < 1 ? 'hsla' : 'hsl';\n    hsl[0] = rnd(hsl[0] || 0);\n    hsl[1] = rnd(hsl[1] * 100) + '%';\n    hsl[2] = rnd(hsl[2] * 100) + '%';\n    if (mode === 'hsla') {\n      hsl[3] = alpha;\n    }\n    return mode + '(' + hsl.join(',') + ')';\n  };\n\n  _input.css = function(h) {\n    return css2rgb(h);\n  };\n\n  chroma.css = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['css']), function(){});\n  };\n\n  Color.prototype.css = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (mode.slice(0, 3) === 'rgb') {\n      return rgb2css(this._rgb);\n    } else if (mode.slice(0, 3) === 'hsl') {\n      return hsl2css(this.hsl(), this.alpha());\n    }\n  };\n\n  _input.named = function(name) {\n    return hex2rgb(w3cx11[name]);\n  };\n\n  _guess_formats.push({\n    p: 5,\n    test: function(n) {\n      if (arguments.length === 1 && (w3cx11[n] != null)) {\n        return 'named';\n      }\n    }\n  });\n\n  Color.prototype.name = function(n) {\n    var h, k;\n    if (arguments.length) {\n      if (w3cx11[n]) {\n        this._rgb = hex2rgb(w3cx11[n]);\n      }\n      this._rgb[3] = 1;\n      this;\n    }\n    h = this.hex('rgb');\n    for (k in w3cx11) {\n      if (h === w3cx11[k]) {\n        return k;\n      }\n    }\n    return h;\n  };\n\n  lch2lab = function() {\n\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n    \n    A saturation multiplier was added by Gregor Aisch\n     */\n    var c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];\n    h = h * DEG2RAD;\n    return [l, cos(h) * c, sin(h) * c];\n  };\n\n  lch2rgb = function() {\n    var L, a, args, b, c, g, h, l, r, ref, ref1;\n    args = unpack(arguments);\n    l = args[0], c = args[1], h = args[2];\n    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];\n    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  lab2lch = function() {\n    var a, b, c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];\n    c = sqrt(a * a + b * b);\n    h = (atan2(b, a) * RAD2DEG + 360) % 360;\n    if (round(c * 10000) === 0) {\n      h = Number.NaN;\n    }\n    return [l, c, h];\n  };\n\n  rgb2lch = function() {\n    var a, b, g, l, r, ref, ref1;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];\n    return lab2lch(l, a, b);\n  };\n\n  chroma.lch = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'lch');\n  };\n\n  chroma.hcl = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'hcl');\n  };\n\n  _input.lch = lch2rgb;\n\n  _input.hcl = function() {\n    var c, h, l, ref;\n    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];\n    return lch2rgb([l, c, h]);\n  };\n\n  Color.prototype.lch = function() {\n    return rgb2lch(this._rgb);\n  };\n\n  Color.prototype.hcl = function() {\n    return rgb2lch(this._rgb).reverse();\n  };\n\n  rgb2cmyk = function(mode) {\n    var b, c, f, g, k, m, r, ref, y;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    k = 1 - Math.max(r, Math.max(g, b));\n    f = k < 1 ? 1 / (1 - k) : 0;\n    c = (1 - r - k) * f;\n    m = (1 - g - k) * f;\n    y = (1 - b - k) * f;\n    return [c, m, y, k];\n  };\n\n  cmyk2rgb = function() {\n    var alpha, args, b, c, g, k, m, r, y;\n    args = unpack(arguments);\n    c = args[0], m = args[1], y = args[2], k = args[3];\n    alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) {\n      return [0, 0, 0, alpha];\n    }\n    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);\n    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);\n    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);\n    return [r, g, b, alpha];\n  };\n\n  _input.cmyk = function() {\n    return cmyk2rgb(unpack(arguments));\n  };\n\n  chroma.cmyk = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['cmyk']), function(){});\n  };\n\n  Color.prototype.cmyk = function() {\n    return rgb2cmyk(this._rgb);\n  };\n\n  _input.gl = function() {\n    var i, k, o, rgb, v;\n    rgb = (function() {\n      var ref, results;\n      ref = unpack(arguments);\n      results = [];\n      for (k in ref) {\n        v = ref[k];\n        results.push(v);\n      }\n      return results;\n    }).apply(this, arguments);\n    for (i = o = 0; o <= 2; i = ++o) {\n      rgb[i] *= 255;\n    }\n    return rgb;\n  };\n\n  chroma.gl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['gl']), function(){});\n  };\n\n  Color.prototype.gl = function() {\n    var rgb;\n    rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n  };\n\n  rgb2luminance = function(r, g, b) {\n    var ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  };\n\n  luminance_x = function(x) {\n    x /= 255;\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return pow((x + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  interpolate_rgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['rgb', interpolate_rgb]);\n\n  Color.prototype.luminance = function(lum, mode) {\n    var cur_lum, eps, max_iter, rgba, test;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (!arguments.length) {\n      return rgb2luminance(this._rgb);\n    }\n    rgba = this._rgb;\n    if (lum === 0) {\n      rgba = [0, 0, 0, this._rgb[3]];\n    } else if (lum === 1) {\n      rgba = [255, 255, 255, this[3]];\n    } else {\n      cur_lum = rgb2luminance(this._rgb);\n      eps = 1e-7;\n      max_iter = 20;\n      test = function(l, h) {\n        var lm, m;\n        m = l.interpolate(h, 0.5, mode);\n        lm = m.luminance();\n        if (Math.abs(lum - lm) < eps || !max_iter--) {\n          return m;\n        }\n        if (lm > lum) {\n          return test(l, m);\n        }\n        return test(m, h);\n      };\n      if (cur_lum > lum) {\n        rgba = test(chroma('black'), this).rgba();\n      } else {\n        rgba = test(this, chroma('white')).rgba();\n      }\n    }\n    return chroma(rgba).alpha(this.alpha());\n  };\n\n  temperature2rgb = function(kelvin) {\n    var b, g, r, temp;\n    temp = kelvin / 100;\n    if (temp < 66) {\n      r = 255;\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\n    } else {\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\n      b = 255;\n    }\n    return [r, g, b];\n  };\n\n  rgb2temperature = function() {\n    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    minTemp = 1000;\n    maxTemp = 40000;\n    eps = 0.4;\n    while (maxTemp - minTemp > eps) {\n      temp = (maxTemp + minTemp) * 0.5;\n      rgb = temperature2rgb(temp);\n      if ((rgb[2] / rgb[0]) >= (b / r)) {\n        maxTemp = temp;\n      } else {\n        minTemp = temp;\n      }\n    }\n    return round(temp);\n  };\n\n  chroma.temperature = chroma.kelvin = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['temperature']), function(){});\n  };\n\n  _input.temperature = _input.kelvin = _input.K = temperature2rgb;\n\n  Color.prototype.temperature = function() {\n    return rgb2temperature(this._rgb);\n  };\n\n  Color.prototype.kelvin = Color.prototype.temperature;\n\n  chroma.contrast = function(a, b) {\n    var l1, l2, ref, ref1;\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.luminance();\n    l2 = b.luminance();\n    if (l1 > l2) {\n      return (l1 + 0.05) / (l2 + 0.05);\n    } else {\n      return (l2 + 0.05) / (l1 + 0.05);\n    }\n  };\n\n  chroma.distance = function(a, b, mode) {\n    var d, i, l1, l2, ref, ref1, sum_sq;\n    if (mode == null) {\n      mode = 'lab';\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.get(mode);\n    l2 = b.get(mode);\n    sum_sq = 0;\n    for (i in l1) {\n      d = (l1[i] || 0) - (l2[i] || 0);\n      sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n  };\n\n  chroma.deltaE = function(a, b, L, C) {\n    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;\n    if (L == null) {\n      L = 1;\n    }\n    if (C == null) {\n      C = 1;\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];\n    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];\n    c1 = sqrt(a1 * a1 + b1 * b1);\n    c2 = sqrt(a2 * a2 + b2 * b2);\n    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);\n    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;\n    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;\n    while (h1 < 0) {\n      h1 += 360;\n    }\n    while (h1 >= 360) {\n      h1 -= 360;\n    }\n    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));\n    c4 = c1 * c1 * c1 * c1;\n    f = sqrt(c4 / (c4 + 1900.0));\n    sh = sc * (f * t + 1.0 - f);\n    delL = L1 - L2;\n    delC = c1 - c2;\n    delA = a1 - a2;\n    delB = b1 - b2;\n    dH2 = delA * delA + delB * delB - delC * delC;\n    v1 = delL / (L * sl);\n    v2 = delC / (C * sc);\n    v3 = sh;\n    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));\n  };\n\n  Color.prototype.get = function(modechan) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    src = me[mode]();\n    if (channel) {\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        return src[i];\n      } else {\n        return console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      return src;\n    }\n  };\n\n  Color.prototype.set = function(modechan, value) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    if (channel) {\n      src = me[mode]();\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        if (type(value) === 'string') {\n          switch (value.charAt(0)) {\n            case '+':\n              src[i] += +value;\n              break;\n            case '-':\n              src[i] += +value;\n              break;\n            case '*':\n              src[i] *= +(value.substr(1));\n              break;\n            case '/':\n              src[i] /= +(value.substr(1));\n              break;\n            default:\n              src[i] = +value;\n          }\n        } else {\n          src[i] = value;\n        }\n      } else {\n        console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      src = value;\n    }\n    return chroma(src, mode).alpha(me.alpha());\n  };\n\n  Color.prototype.clipped = function() {\n    return this._rgb._clipped || false;\n  };\n\n  Color.prototype.alpha = function(a) {\n    if (arguments.length) {\n      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);\n    }\n    return this._rgb[3];\n  };\n\n  Color.prototype.darken = function(amount) {\n    var lab, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lab = me.lab();\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\n    return chroma.lab(lab).alpha(me.alpha());\n  };\n\n  Color.prototype.brighten = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.darken(-amount);\n  };\n\n  Color.prototype.darker = Color.prototype.darken;\n\n  Color.prototype.brighter = Color.prototype.brighten;\n\n  Color.prototype.saturate = function(amount) {\n    var lch, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lch = me.lch();\n    lch[1] += amount * LAB_CONSTANTS.Kn;\n    if (lch[1] < 0) {\n      lch[1] = 0;\n    }\n    return chroma.lch(lch).alpha(me.alpha());\n  };\n\n  Color.prototype.desaturate = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.saturate(-amount);\n  };\n\n  Color.prototype.premultiply = function() {\n    var a, rgb;\n    rgb = this.rgb();\n    a = this.alpha();\n    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);\n  };\n\n  blend = function(bottom, top, mode) {\n    if (!blend[mode]) {\n      throw 'unknown blend mode ' + mode;\n    }\n    return blend[mode](bottom, top);\n  };\n\n  blend_f = function(f) {\n    return function(bottom, top) {\n      var c0, c1;\n      c0 = chroma(top).rgb();\n      c1 = chroma(bottom).rgb();\n      return chroma(f(c0, c1), 'rgb');\n    };\n  };\n\n  each = function(f) {\n    return function(c0, c1) {\n      var i, o, out;\n      out = [];\n      for (i = o = 0; o <= 3; i = ++o) {\n        out[i] = f(c0[i], c1[i]);\n      }\n      return out;\n    };\n  };\n\n  normal = function(a, b) {\n    return a;\n  };\n\n  multiply = function(a, b) {\n    return a * b / 255;\n  };\n\n  darken = function(a, b) {\n    if (a > b) {\n      return b;\n    } else {\n      return a;\n    }\n  };\n\n  lighten = function(a, b) {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  screen = function(a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  };\n\n  overlay = function(a, b) {\n    if (b < 128) {\n      return 2 * a * b / 255;\n    } else {\n      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n    }\n  };\n\n  burn = function(a, b) {\n    return 255 * (1 - (1 - b / 255) / (a / 255));\n  };\n\n  dodge = function(a, b) {\n    if (a === 255) {\n      return 255;\n    }\n    a = 255 * (b / 255) / (1 - a / 255);\n    if (a > 255) {\n      return 255;\n    } else {\n      return a;\n    }\n  };\n\n  blend.normal = blend_f(each(normal));\n\n  blend.multiply = blend_f(each(multiply));\n\n  blend.screen = blend_f(each(screen));\n\n  blend.overlay = blend_f(each(overlay));\n\n  blend.darken = blend_f(each(darken));\n\n  blend.lighten = blend_f(each(lighten));\n\n  blend.dodge = blend_f(each(dodge));\n\n  blend.burn = blend_f(each(burn));\n\n  chroma.blend = blend;\n\n  chroma.analyze = function(data) {\n    var len, o, r, val;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    for (o = 0, len = data.length; o < len; o++) {\n      val = data[o];\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.scale = function(colors, positions) {\n    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;\n    _mode = 'rgb';\n    _nacol = chroma('#ccc');\n    _spread = 0;\n    _fixed = false;\n    _domain = [0, 1];\n    _pos = [];\n    _padding = [0, 0];\n    _classes = false;\n    _colors = [];\n    _out = false;\n    _min = 0;\n    _max = 1;\n    _correctLightness = false;\n    _colorCache = {};\n    _useCache = true;\n    _gamma = 1;\n    setColors = function(colors) {\n      var c, col, o, ref, ref1, w;\n      if (colors == null) {\n        colors = ['#fff', '#000'];\n      }\n      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {\n        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;\n      }\n      if (type(colors) === 'array') {\n        if (colors.length === 1) {\n          colors = [colors[0], colors[0]];\n        }\n        colors = colors.slice(0);\n        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {\n          col = colors[c];\n          if (type(col) === \"string\") {\n            colors[c] = chroma(col);\n          }\n        }\n        _pos.length = 0;\n        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {\n          _pos.push(c / (colors.length - 1));\n        }\n      }\n      resetCache();\n      return _colors = colors;\n    };\n    getClass = function(value) {\n      var i, n;\n      if (_classes != null) {\n        n = _classes.length - 1;\n        i = 0;\n        while (i < n && value >= _classes[i]) {\n          i++;\n        }\n        return i - 1;\n      }\n      return 0;\n    };\n    tmap = function(t) {\n      return t;\n    };\n    classifyValue = function(value) {\n      var i, maxc, minc, n, val;\n      val = value;\n      if (_classes.length > 2) {\n        n = _classes.length - 1;\n        i = getClass(value);\n        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);\n        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);\n        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);\n      }\n      return val;\n    };\n    getColor = function(val, bypassMap) {\n      var c, col, i, k, o, p, ref, t;\n      if (bypassMap == null) {\n        bypassMap = false;\n      }\n      if (isNaN(val) || val === null) {\n        return _nacol;\n      }\n      if (!bypassMap) {\n        if (_classes && _classes.length > 2) {\n          c = getClass(val);\n          t = c / (_classes.length - 2);\n        } else if (_max !== _min) {\n          t = (val - _min) / (_max - _min);\n        } else {\n          t = 1;\n        }\n      } else {\n        t = val;\n      }\n      if (!bypassMap) {\n        t = tmap(t);\n      }\n      if (_gamma !== 1) {\n        t = pow(t, _gamma);\n      }\n      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n      t = Math.min(1, Math.max(0, t));\n      k = Math.floor(t * 10000);\n      if (_useCache && _colorCache[k]) {\n        col = _colorCache[k];\n      } else {\n        if (type(_colors) === 'array') {\n          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            p = _pos[i];\n            if (t <= p) {\n              col = _colors[i];\n              break;\n            }\n            if (t >= p && i === _pos.length - 1) {\n              col = _colors[i];\n              break;\n            }\n            if (t > p && t < _pos[i + 1]) {\n              t = (t - p) / (_pos[i + 1] - p);\n              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);\n              break;\n            }\n          }\n        } else if (type(_colors) === 'function') {\n          col = _colors(t);\n        }\n        if (_useCache) {\n          _colorCache[k] = col;\n        }\n      }\n      return col;\n    };\n    resetCache = function() {\n      return _colorCache = {};\n    };\n    setColors(colors);\n    f = function(v) {\n      var c;\n      c = chroma(getColor(v));\n      if (_out && c[_out]) {\n        return c[_out]();\n      } else {\n        return c;\n      }\n    };\n    f.classes = function(classes) {\n      var d;\n      if (classes != null) {\n        if (type(classes) === 'array') {\n          _classes = classes;\n          _domain = [classes[0], classes[classes.length - 1]];\n        } else {\n          d = chroma.analyze(_domain);\n          if (classes === 0) {\n            _classes = [d.min, d.max];\n          } else {\n            _classes = chroma.limits(d, 'e', classes);\n          }\n        }\n        return f;\n      }\n      return _classes;\n    };\n    f.domain = function(domain) {\n      var c, d, k, len, o, ref, w;\n      if (!arguments.length) {\n        return _domain;\n      }\n      _min = domain[0];\n      _max = domain[domain.length - 1];\n      _pos = [];\n      k = _colors.length;\n      if (domain.length === k && _min !== _max) {\n        for (o = 0, len = domain.length; o < len; o++) {\n          d = domain[o];\n          _pos.push((d - _min) / (_max - _min));\n        }\n      } else {\n        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {\n          _pos.push(c / (k - 1));\n        }\n      }\n      _domain = [_min, _max];\n      return f;\n    };\n    f.mode = function(_m) {\n      if (!arguments.length) {\n        return _mode;\n      }\n      _mode = _m;\n      resetCache();\n      return f;\n    };\n    f.range = function(colors, _pos) {\n      setColors(colors, _pos);\n      return f;\n    };\n    f.out = function(_o) {\n      _out = _o;\n      return f;\n    };\n    f.spread = function(val) {\n      if (!arguments.length) {\n        return _spread;\n      }\n      _spread = val;\n      return f;\n    };\n    f.correctLightness = function(v) {\n      if (v == null) {\n        v = true;\n      }\n      _correctLightness = v;\n      resetCache();\n      if (_correctLightness) {\n        tmap = function(t) {\n          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;\n          L0 = getColor(0, true).lab()[0];\n          L1 = getColor(1, true).lab()[0];\n          pol = L0 > L1;\n          L_actual = getColor(t, true).lab()[0];\n          L_ideal = L0 + (L1 - L0) * t;\n          L_diff = L_actual - L_ideal;\n          t0 = 0;\n          t1 = 1;\n          max_iter = 20;\n          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n            (function() {\n              if (pol) {\n                L_diff *= -1;\n              }\n              if (L_diff < 0) {\n                t0 = t;\n                t += (t1 - t) * 0.5;\n              } else {\n                t1 = t;\n                t += (t0 - t) * 0.5;\n              }\n              L_actual = getColor(t, true).lab()[0];\n              return L_diff = L_actual - L_ideal;\n            })();\n          }\n          return t;\n        };\n      } else {\n        tmap = function(t) {\n          return t;\n        };\n      }\n      return f;\n    };\n    f.padding = function(p) {\n      if (p != null) {\n        if (type(p) === 'number') {\n          p = [p, p];\n        }\n        _padding = p;\n        return f;\n      } else {\n        return _padding;\n      }\n    };\n    f.colors = function(numColors, out) {\n      var dd, dm, i, o, ref, result, results, samples, w;\n      if (arguments.length < 2) {\n        out = 'hex';\n      }\n      result = [];\n      if (arguments.length === 0) {\n        result = _colors.slice(0);\n      } else if (numColors === 1) {\n        result = [f(0.5)];\n      } else if (numColors > 1) {\n        dm = _domain[0];\n        dd = _domain[1] - dm;\n        result = (function() {\n          results = [];\n          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }\n          return results;\n        }).apply(this).map(function(i) {\n          return f(dm + i / (numColors - 1) * dd);\n        });\n      } else {\n        colors = [];\n        samples = [];\n        if (_classes && _classes.length > 2) {\n          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {\n            samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n          }\n        } else {\n          samples = _domain;\n        }\n        result = samples.map(function(v) {\n          return f(v);\n        });\n      }\n      if (chroma[out]) {\n        result = result.map(function(c) {\n          return c[out]();\n        });\n      }\n      return result;\n    };\n    f.cache = function(c) {\n      if (c != null) {\n        _useCache = c;\n        return f;\n      } else {\n        return _useCache;\n      }\n    };\n    f.gamma = function(g) {\n      if (g != null) {\n        _gamma = g;\n        return f;\n      } else {\n        return _gamma;\n      }\n    };\n    f.nodata = function(d) {\n      if (d != null) {\n        _nacol = chroma(d);\n        return f;\n      } else {\n        return _nacol;\n      }\n    };\n    return f;\n  };\n\n  if (chroma.scales == null) {\n    chroma.scales = {};\n  }\n\n  chroma.scales.cool = function() {\n    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);\n  };\n\n  chroma.scales.hot = function() {\n    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');\n  };\n\n  chroma.analyze = function(data, key, filter) {\n    var add, k, len, o, r, val, visit;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    if (filter == null) {\n      filter = function() {\n        return true;\n      };\n    }\n    add = function(val) {\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    };\n    visit = function(val, k) {\n      if (filter(val, k)) {\n        if ((key != null) && type(key) === 'function') {\n          return add(key(val));\n        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {\n          return add(val[key]);\n        } else {\n          return add(val);\n        }\n      }\n    };\n    if (type(data) === 'array') {\n      for (o = 0, len = data.length; o < len; o++) {\n        val = data[o];\n        visit(val);\n      }\n    } else {\n      for (k in data) {\n        val = data[k];\n        visit(val, k);\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.limits = function(data, mode, num) {\n    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;\n    if (mode == null) {\n      mode = 'equal';\n    }\n    if (num == null) {\n      num = 7;\n    }\n    if (type(data) === 'array') {\n      data = chroma.analyze(data);\n    }\n    min = data.min;\n    max = data.max;\n    sum = data.sum;\n    values = data.values.sort(function(a, b) {\n      return a - b;\n    });\n    if (num === 1) {\n      return [min, max];\n    }\n    limits = [];\n    if (mode.substr(0, 1) === 'c') {\n      limits.push(min);\n      limits.push(max);\n    }\n    if (mode.substr(0, 1) === 'e') {\n      limits.push(min);\n      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        limits.push(min + (i / num) * (max - min));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n      if (min <= 0) {\n        throw 'Logarithmic scales are only possible for values > 0';\n      }\n      min_log = Math.LOG10E * log(min);\n      max_log = Math.LOG10E * log(max);\n      limits.push(min);\n      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {\n        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n      limits.push(min);\n      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {\n        p = (values.length - 1) * i / num;\n        pb = floor(p);\n        if (pb === p) {\n          limits.push(values[pb]);\n        } else {\n          pr = p - pb;\n          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n        }\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n\n      /*\n      implementation based on\n      http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n      simplified for 1-d input values\n       */\n      n = values.length;\n      assignments = new Array(n);\n      clusterSizes = new Array(num);\n      repeat = true;\n      nb_iters = 0;\n      centroids = null;\n      centroids = [];\n      centroids.push(min);\n      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {\n        centroids.push(min + (i / num) * (max - min));\n      }\n      centroids.push(max);\n      while (repeat) {\n        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {\n          clusterSizes[j] = 0;\n        }\n        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {\n          value = values[i];\n          mindist = Number.MAX_VALUE;\n          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {\n            dist = abs(centroids[j] - value);\n            if (dist < mindist) {\n              mindist = dist;\n              best = j;\n            }\n          }\n          clusterSizes[best]++;\n          assignments[i] = best;\n        }\n        newCentroids = new Array(num);\n        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {\n          newCentroids[j] = null;\n        }\n        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {\n          cluster = assignments[i];\n          if (newCentroids[cluster] === null) {\n            newCentroids[cluster] = values[i];\n          } else {\n            newCentroids[cluster] += values[i];\n          }\n        }\n        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {\n          newCentroids[j] *= 1 / clusterSizes[j];\n        }\n        repeat = false;\n        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {\n          if (newCentroids[j] !== centroids[i]) {\n            repeat = true;\n            break;\n          }\n        }\n        centroids = newCentroids;\n        nb_iters++;\n        if (nb_iters > 200) {\n          repeat = false;\n        }\n      }\n      kClusters = {};\n      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {\n        kClusters[j] = [];\n      }\n      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {\n        cluster = assignments[i];\n        kClusters[cluster].push(values[i]);\n      }\n      tmpKMeansBreaks = [];\n      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {\n        tmpKMeansBreaks.push(kClusters[j][0]);\n        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n      }\n      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {\n        return a - b;\n      });\n      limits.push(tmpKMeansBreaks[0]);\n      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {\n        v = tmpKMeansBreaks[i];\n        if (!isNaN(v) && limits.indexOf(v) === -1) {\n          limits.push(v);\n        }\n      }\n    }\n    return limits;\n  };\n\n  hsi2rgb = function(h, s, i) {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n    var args, b, g, r;\n    args = unpack(arguments);\n    h = args[0], s = args[1], i = args[2];\n    if (isNaN(h)) {\n      h = 0;\n    }\n    h /= 360;\n    if (h < 1 / 3) {\n      b = (1 - s) / 3;\n      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n      h -= 1 / 3;\n      r = (1 - s) / 3;\n      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      b = 1 - (r + g);\n    } else {\n      h -= 2 / 3;\n      g = (1 - s) / 3;\n      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsi = function() {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n     */\n    var b, g, h, i, min, r, ref, s;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    TWOPI = Math.PI * 2;\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    i = (r + g + b) / 3;\n    s = 1 - min / i;\n    if (s === 0) {\n      h = 0;\n    } else {\n      h = ((r - g) + (r - b)) / 2;\n      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));\n      h = Math.acos(h);\n      if (b > g) {\n        h = TWOPI - h;\n      }\n      h /= TWOPI;\n    }\n    return [h * 360, s, i];\n  };\n\n  chroma.hsi = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsi']), function(){});\n  };\n\n  _input.hsi = hsi2rgb;\n\n  Color.prototype.hsi = function() {\n    return rgb2hsi(this._rgb);\n  };\n\n  interpolate_hsx = function(col1, col2, f, m) {\n    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;\n    if (m === 'hsl') {\n      xyz0 = col1.hsl();\n      xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n      xyz0 = col1.hsv();\n      xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n      xyz0 = col1.hcg();\n      xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n      xyz0 = col1.hsi();\n      xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n      m = 'hcl';\n      xyz0 = col1.hcl();\n      xyz1 = col2.hcl();\n    }\n    if (m.substr(0, 1) === 'h') {\n      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];\n      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];\n    }\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n      if (hue1 > hue0 && hue1 - hue0 > 180) {\n        dh = hue1 - (hue0 + 360);\n      } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n        dh = hue1 + 360 - hue0;\n      } else {\n        dh = hue1 - hue0;\n      }\n      hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n      hue = hue0;\n      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {\n        sat = sat0;\n      }\n    } else if (!isNaN(hue1)) {\n      hue = hue1;\n      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {\n        sat = sat1;\n      }\n    } else {\n      hue = Number.NaN;\n    }\n    if (sat == null) {\n      sat = sat0 + f * (sat1 - sat0);\n    }\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return res = chroma[m](hue, sat, lbv);\n  };\n\n  _interpolators = _interpolators.concat((function() {\n    var len, o, ref, results;\n    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];\n    results = [];\n    for (o = 0, len = ref.length; o < len; o++) {\n      m = ref[o];\n      results.push([m, interpolate_hsx]);\n    }\n    return results;\n  })());\n\n  interpolate_num = function(col1, col2, f, m) {\n    var n1, n2;\n    n1 = col1.num();\n    n2 = col2.num();\n    return chroma.num(n1 + (n2 - n1) * f, 'num');\n  };\n\n  _interpolators.push(['num', interpolate_num]);\n\n  interpolate_lab = function(col1, col2, f, m) {\n    var res, xyz0, xyz1;\n    xyz0 = col1.lab();\n    xyz1 = col2.lab();\n    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['lab', interpolate_lab]);\n\n}).call(this);\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"palette-presenter\"},[_c('ul',{staticClass:\"list-unstyled palette-presenter__list\"},_vm._l((_vm.colors),function(ref,name){\nvar value = ref.value;\nreturn _c('li',{staticClass:\"palette-presenter__list__item\",style:(_vm.bgStyle(name))},[_c('span',{staticClass:\"font-weight-bold palette-presenter__list__item__name\"},[_vm._v(\"\\n        \"+_vm._s(name)+\"\\n      \")]),_c('span',{staticClass:\"font-weight-bold palette-presenter__list__item__value d-flex align-items-center\"},[_c('span',{staticClass:\"palette-presenter__list__item__value__hex\"},[_vm._v(\"\\n          \"+_vm._s(value.hex)+\"\\n        \")]),_c('button',{staticClass:\"btn btn-sm btn-link ml-2\",on:{\"click\":function($event){_vm.$copyText(value.hex)}}},[_c('fa',{attrs:{\"icon\":\"paste\"}})],1)])])}))])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"palette-presenter\">\n    <ul class=\"list-unstyled palette-presenter__list\">\n      <li v-for=\"({ value }, name) in colors\" :style=\"bgStyle(name)\" class=\"palette-presenter__list__item\">\n        <span class=\"font-weight-bold palette-presenter__list__item__name\">\n          {{ name }}\n        </span>\n        <span class=\"font-weight-bold palette-presenter__list__item__value d-flex align-items-center\">\n          <span class=\"palette-presenter__list__item__value__hex\">\n            {{ value.hex }}\n          </span>\n          <button class=\"btn btn-sm btn-link ml-2\" @click=\"$copyText(value.hex)\">\n            <fa icon=\"paste\" />\n          </button>\n        </span>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  import chroma from 'chroma-js'\n  import { faPaste } from '@fortawesome/free-solid-svg-icons/faPaste'\n  import { library, default as Fa } from '@/components/Fa'\n  library.add(faPaste)\n\n  export default {\n    components: {\n      Fa\n    },\n    props: {\n      colors: {\n        type: Object\n      }\n    },\n    methods: {\n      bgStyle(name) {\n        return {\n          backgroundColor: this.colors[name].value.hex,\n          color: this.textContrast(name)\n        }\n      },\n      textContrast(name) {\n        const hex = this.colors[name].value.hex\n        return chroma.contrast(hex, '#000') > 4.5 ? '#000' : '#fff'\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  @import '../styles/variables.scss';\n  @import 'node_modules/bootstrap/scss/_mixins.scss';\n\n  .palette-presenter {\n\n    &__list {\n      margin: 0 -1 * $spacer;\n      display: flex;\n      flex-wrap: wrap;\n\n      &__item {\n        padding: 0;\n        display: block;\n        position: relative;\n        flex: calc(50% - #{$spacer * 2}) 0;\n        margin: $spacer;\n        box-shadow: inset 0 0 0 1px rgba(#000, .1);\n\n        @include media-breakpoint-down(md) {\n          flex: 100% 0;\n        }\n\n        &:after {\n          content: \"\";\n          display: block;\n          width: 100%;\n          padding-top: 30%;\n          min-height: 4rem * $line-height-base;\n        }\n\n        &__name {\n          position: absolute;\n          top: $spacer;\n          left: $spacer;\n        }\n\n        &__value {\n          position: absolute;\n          right: $spacer;\n          bottom: $spacer;\n          padding: .25em;\n          padding-left: .5em;\n          background: rgba(#fff, .2);\n          box-shadow: 0 0 0 1px rgba(#000, .1);\n\n          button {\n            color: inherit;\n            background: rgba(#fff, .2);\n          }\n        }\n      }\n    }\n  }\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PalettePresenter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PalettePresenter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./PalettePresenter.vue?vue&type=template&id=0ffff514&scoped=true&\"\nimport script from \"./PalettePresenter.vue?vue&type=script&lang=js&\"\nexport * from \"./PalettePresenter.vue?vue&type=script&lang=js&\"\nimport style0 from \"./PalettePresenter.vue?vue&type=style&index=0&id=0ffff514&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0ffff514\",\n  null\n  \n)\n\ncomponent.options.__file = \"PalettePresenter.vue\"\nexport default component.exports"],"sourceRoot":""}